{"version":3,"names":["Renamer","traverse","Binding","globals","_t","NOT_LOCAL_BINDING","callExpression","cloneNode","getBindingIdentifiers","identifier","isArrayExpression","isBinary","isClass","isClassBody","isClassDeclaration","isExportAllDeclaration","isExportDefaultDeclaration","isExportNamedDeclaration","isFunctionDeclaration","isIdentifier","isImportDeclaration","isLiteral","isMethod","isModuleSpecifier","isNullLiteral","isObjectExpression","isProperty","isPureish","isRegExpLiteral","isSuper","isTaggedTemplateExpression","isTemplateLiteral","isThisExpression","isUnaryExpression","isVariableDeclaration","matchesPattern","memberExpression","numericLiteral","toIdentifier","unaryExpression","variableDeclaration","variableDeclarator","isRecordExpression","isTupleExpression","isObjectProperty","isTopicReference","isMetaProperty","isPrivateName","isExportDeclaration","scope","scopeCache","gatherNodeParts","node","parts","type","source","specifiers","length","e","declaration","local","push","value","object","property","name","callee","properties","argument","key","left","id","expression","meta","openingElement","openingFragment","namespace","collectorVisitor","ForStatement","path","declar","get","isVar","parentScope","getFunctionParent","getProgramParent","registerBinding","Declaration","isBlockScoped","parent","registerDeclaration","ImportDeclaration","getBlockParent","ReferencedIdentifier","state","references","ForXStatement","isPattern","constantViolations","ExportDeclaration","exit","binding","getBinding","reference","decl","declarations","Object","keys","LabeledStatement","AssignmentExpression","assignments","UpdateExpression","UnaryExpression","operator","BlockScoped","bindings","CatchClause","Function","params","param","isFunctionExpression","has","ClassExpression","uid","Scope","constructor","block","labels","inited","uids","data","crawling","cached","set","Map","_parent","shouldSkip","listKey","parentPath","isScope","parentBlock","hub","opts","generateDeclaredUidIdentifier","generateUidIdentifier","generateUid","replace","i","_generateUid","hasLabel","hasBinding","hasGlobal","hasReference","program","generateUidBasedOnNode","defaultName","join","slice","generateUidIdentifierBasedOnNode","isStatic","constant","maybeGenerateMemoised","dontPush","checkBlockScopedCollisions","kind","duplicate","buildError","TypeError","rename","oldName","newName","renamer","arguments","_renameFromMap","map","dump","sep","repeat","console","log","violations","toArray","arrayLikeIsIterable","isGenericType","helperName","args","unshift","addHelper","getLabel","registerLabel","label","isLabeledStatement","declare","isTypeDeclaration","importKind","specifier","isTypeSpecifier","isImportSpecifier","buildUndefinedNode","registerConstantViolation","ids","reassign","bindingPath","ReferenceError","declarators","getOuterBindingIdentifiers","getOwnBinding","addGlobal","hasUid","isPure","constantsOnly","_node$decorators","superClass","decorators","body","method","right","elem","elements","prop","_node$decorators2","computed","_node$decorators3","static","tag","quasi","expressions","setData","val","getData","removeData","init","crawl","create","programParent","_exploded","visit","enter","typeVisitors","ref","getPatternParent","isBlockStatement","isProgram","isSwitchStatement","isLoop","isCatchClause","isFunction","ensureBlock","unique","blockHoist","_blockHoist","dataKey","declarPath","unshiftContainer","declarator","len","Error","isFunctionParent","isBlockParent","getAllBindings","getAllBindingsOfKind","kinds","bindingIdentifierEquals","getBindingIdentifier","previousPath","_previousPath","isArrowFunctionExpression","_this$getBinding","getOwnBindingIdentifier","hasOwnBinding","_opts","_opts2","_opts3","noGlobals","parentHasBinding","noUids","includes","contextVariables","_this$parent","moveBindingTo","info","removeOwnBinding","removeBinding","_this$getBinding2","builtin"],"sources":["../../src/scope/index.ts"],"sourcesContent":["import Renamer from \"./lib/renamer\";\nimport type NodePath from \"../path\";\nimport traverse from \"../index\";\nimport type { TraverseOptions } from \"../index\";\nimport Binding from \"./binding\";\nimport type { BindingKind } from \"./binding\";\nimport globals from \"globals\";\nimport {\n  NOT_LOCAL_BINDING,\n  callExpression,\n  cloneNode,\n  getBindingIdentifiers,\n  identifier,\n  isArrayExpression,\n  isBinary,\n  isClass,\n  isClassBody,\n  isClassDeclaration,\n  isExportAllDeclaration,\n  isExportDefaultDeclaration,\n  isExportNamedDeclaration,\n  isFunctionDeclaration,\n  isIdentifier,\n  isImportDeclaration,\n  isLiteral,\n  isMethod,\n  isModuleSpecifier,\n  isNullLiteral,\n  isObjectExpression,\n  isProperty,\n  isPureish,\n  isRegExpLiteral,\n  isSuper,\n  isTaggedTemplateExpression,\n  isTemplateLiteral,\n  isThisExpression,\n  isUnaryExpression,\n  isVariableDeclaration,\n  matchesPattern,\n  memberExpression,\n  numericLiteral,\n  toIdentifier,\n  unaryExpression,\n  variableDeclaration,\n  variableDeclarator,\n  isRecordExpression,\n  isTupleExpression,\n  isObjectProperty,\n  isTopicReference,\n  isMetaProperty,\n  isPrivateName,\n  isExportDeclaration,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport { scope as scopeCache } from \"../cache\";\nimport type { Visitor } from \"../types\";\n\ntype NodePart = string | number | boolean;\n// Recursively gathers the identifying names of a node.\nfunction gatherNodeParts(node: t.Node, parts: NodePart[]) {\n  switch (node?.type) {\n    default:\n      if (isImportDeclaration(node) || isExportDeclaration(node)) {\n        if (\n          (isExportAllDeclaration(node) ||\n            isExportNamedDeclaration(node) ||\n            isImportDeclaration(node)) &&\n          node.source\n        ) {\n          gatherNodeParts(node.source, parts);\n        } else if (\n          (isExportNamedDeclaration(node) || isImportDeclaration(node)) &&\n          node.specifiers &&\n          node.specifiers.length\n        ) {\n          for (const e of node.specifiers) gatherNodeParts(e, parts);\n        } else if (\n          (isExportDefaultDeclaration(node) ||\n            isExportNamedDeclaration(node)) &&\n          node.declaration\n        ) {\n          gatherNodeParts(node.declaration, parts);\n        }\n      } else if (isModuleSpecifier(node)) {\n        // todo(flow->ts): should condition instead be:\n        //    ```\n        //    t.isExportSpecifier(node) ||\n        //    t.isImportDefaultSpecifier(node) ||\n        //    t.isImportNamespaceSpecifier(node) ||\n        //    t.isImportSpecifier(node)\n        //    ```\n        //    allowing only nodes with `.local`?\n        // @ts-expect-error todo(flow->ts)\n        gatherNodeParts(node.local, parts);\n      } else if (\n        isLiteral(node) &&\n        !isNullLiteral(node) &&\n        !isRegExpLiteral(node) &&\n        !isTemplateLiteral(node)\n      ) {\n        parts.push(node.value);\n      }\n      break;\n\n    case \"MemberExpression\":\n    case \"OptionalMemberExpression\":\n    case \"JSXMemberExpression\":\n      gatherNodeParts(node.object, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"Identifier\":\n    case \"JSXIdentifier\":\n      parts.push(node.name);\n      break;\n\n    case \"CallExpression\":\n    case \"OptionalCallExpression\":\n    case \"NewExpression\":\n      gatherNodeParts(node.callee, parts);\n      break;\n\n    case \"ObjectExpression\":\n    case \"ObjectPattern\":\n      for (const e of node.properties) {\n        gatherNodeParts(e, parts);\n      }\n      break;\n\n    case \"SpreadElement\":\n    case \"RestElement\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"ObjectProperty\":\n    case \"ObjectMethod\":\n    case \"ClassProperty\":\n    case \"ClassMethod\":\n    case \"ClassPrivateProperty\":\n    case \"ClassPrivateMethod\":\n      gatherNodeParts(node.key, parts);\n      break;\n\n    case \"ThisExpression\":\n      parts.push(\"this\");\n      break;\n\n    case \"Super\":\n      parts.push(\"super\");\n      break;\n\n    case \"Import\":\n      parts.push(\"import\");\n      break;\n\n    case \"DoExpression\":\n      parts.push(\"do\");\n      break;\n\n    case \"YieldExpression\":\n      parts.push(\"yield\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AwaitExpression\":\n      parts.push(\"await\");\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"AssignmentExpression\":\n      gatherNodeParts(node.left, parts);\n      break;\n\n    case \"VariableDeclarator\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"FunctionExpression\":\n    case \"FunctionDeclaration\":\n    case \"ClassExpression\":\n    case \"ClassDeclaration\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"PrivateName\":\n      gatherNodeParts(node.id, parts);\n      break;\n\n    case \"ParenthesizedExpression\":\n      gatherNodeParts(node.expression, parts);\n      break;\n\n    case \"UnaryExpression\":\n    case \"UpdateExpression\":\n      gatherNodeParts(node.argument, parts);\n      break;\n\n    case \"MetaProperty\":\n      gatherNodeParts(node.meta, parts);\n      gatherNodeParts(node.property, parts);\n      break;\n\n    case \"JSXElement\":\n      gatherNodeParts(node.openingElement, parts);\n      break;\n\n    case \"JSXOpeningElement\":\n      gatherNodeParts(node.name, parts);\n      break;\n\n    case \"JSXFragment\":\n      gatherNodeParts(node.openingFragment, parts);\n      break;\n\n    case \"JSXOpeningFragment\":\n      parts.push(\"Fragment\");\n      break;\n\n    case \"JSXNamespacedName\":\n      gatherNodeParts(node.namespace, parts);\n      gatherNodeParts(node.name, parts);\n      break;\n  }\n}\n\n//\ninterface CollectVisitorState {\n  assignments: NodePath<t.AssignmentExpression>[];\n  references: NodePath<t.Identifier | t.JSXIdentifier>[];\n  constantViolations: NodePath[];\n}\n\nconst collectorVisitor: Visitor<CollectVisitorState> = {\n  ForStatement(path) {\n    const declar = path.get(\"init\");\n    // delegate block scope handling to the `BlockScoped` method\n    if (declar.isVar()) {\n      const { scope } = path;\n      const parentScope = scope.getFunctionParent() || scope.getProgramParent();\n      parentScope.registerBinding(\"var\", declar);\n    }\n  },\n\n  Declaration(path) {\n    // delegate block scope handling to the `BlockScoped` method\n    if (path.isBlockScoped()) return;\n\n    // delegate import handing to the `ImportDeclaration` method\n    if (path.isImportDeclaration()) return;\n\n    // this will be hit again once we traverse into it after this iteration\n    if (path.isExportDeclaration()) return;\n\n    // we've ran into a declaration!\n    const parent =\n      path.scope.getFunctionParent() || path.scope.getProgramParent();\n    parent.registerDeclaration(path);\n  },\n\n  ImportDeclaration(path) {\n    // import may only appear in the top level or inside a module/namespace (for TS/flow)\n    const parent = path.scope.getBlockParent();\n\n    parent.registerDeclaration(path);\n  },\n\n  ReferencedIdentifier(path, state) {\n    state.references.push(path);\n  },\n\n  ForXStatement(path, state) {\n    const left = path.get(\"left\");\n    if (left.isPattern() || left.isIdentifier()) {\n      state.constantViolations.push(path);\n    }\n    // delegate block scope handling to the `BlockScoped` method\n    else if (left.isVar()) {\n      const { scope } = path;\n      const parentScope = scope.getFunctionParent() || scope.getProgramParent();\n      parentScope.registerBinding(\"var\", left);\n    }\n  },\n\n  ExportDeclaration: {\n    exit(path) {\n      const { node, scope } = path;\n      // ExportAllDeclaration does not have `declaration`\n      if (isExportAllDeclaration(node)) return;\n      const declar = node.declaration;\n      if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {\n        const id = declar.id;\n        if (!id) return;\n\n        const binding = scope.getBinding(id.name);\n        binding?.reference(path);\n      } else if (isVariableDeclaration(declar)) {\n        for (const decl of declar.declarations) {\n          for (const name of Object.keys(getBindingIdentifiers(decl))) {\n            const binding = scope.getBinding(name);\n            binding?.reference(path);\n          }\n        }\n      }\n    },\n  },\n\n  LabeledStatement(path) {\n    path.scope.getBlockParent().registerDeclaration(path);\n  },\n\n  AssignmentExpression(path, state) {\n    state.assignments.push(path);\n  },\n\n  UpdateExpression(path, state) {\n    state.constantViolations.push(path);\n  },\n\n  UnaryExpression(path, state) {\n    if (path.node.operator === \"delete\") {\n      state.constantViolations.push(path);\n    }\n  },\n\n  BlockScoped(path) {\n    let scope = path.scope;\n    if (scope.path === path) scope = scope.parent;\n\n    const parent = scope.getBlockParent();\n    parent.registerDeclaration(path);\n\n    // Register class identifier in class' scope if this is a class declaration.\n    if (path.isClassDeclaration() && path.node.id) {\n      const id = path.node.id;\n      const name = id.name;\n\n      path.scope.bindings[name] = path.scope.parent.getBinding(name);\n    }\n  },\n\n  CatchClause(path) {\n    path.scope.registerBinding(\"let\", path);\n  },\n\n  Function(path) {\n    const params: Array<NodePath> = path.get(\"params\");\n    for (const param of params) {\n      path.scope.registerBinding(\"param\", param);\n    }\n\n    // Register function expression id after params. When the id\n    // collides with a function param, the id effectively can't be\n    // referenced: here we registered it as a constantViolation\n    if (\n      path.isFunctionExpression() &&\n      path.has(\"id\") &&\n      // @ts-expect-error Fixme: document symbol ast properties\n      !path.get(\"id\").node[NOT_LOCAL_BINDING]\n    ) {\n      path.scope.registerBinding(\"local\", path.get(\"id\"), path);\n    }\n  },\n\n  ClassExpression(path) {\n    if (\n      path.has(\"id\") &&\n      // @ts-expect-error Fixme: document symbol ast properties\n      !path.get(\"id\").node[NOT_LOCAL_BINDING]\n    ) {\n      path.scope.registerBinding(\"local\", path);\n    }\n  },\n};\n\nlet uid = 0;\n\nexport type { Binding };\n\nexport default class Scope {\n  uid;\n\n  path: NodePath;\n  block: t.Pattern | t.Scopable;\n\n  labels;\n  inited;\n\n  bindings: { [name: string]: Binding };\n  references: { [name: string]: true };\n  globals: { [name: string]: t.Identifier | t.JSXIdentifier };\n  uids: { [name: string]: boolean };\n  data: { [key: string | symbol]: unknown };\n  crawling: boolean;\n\n  /**\n   * This searches the current \"scope\" and collects all references/bindings\n   * within.\n   */\n  constructor(path: NodePath<t.Pattern | t.Scopable>) {\n    const { node } = path;\n    const cached = scopeCache.get(node);\n    // Sometimes, a scopable path is placed higher in the AST tree.\n    // In these cases, have to create a new Scope.\n    if (cached?.path === path) {\n      return cached;\n    }\n    scopeCache.set(node, this);\n\n    this.uid = uid++;\n\n    this.block = node;\n    this.path = path;\n\n    this.labels = new Map();\n    this.inited = false;\n  }\n\n  /**\n   * Globals.\n   */\n\n  static globals = Object.keys(globals.builtin);\n\n  /**\n   * Variables available in current context.\n   */\n\n  static contextVariables = [\"arguments\", \"undefined\", \"Infinity\", \"NaN\"];\n\n  get parent() {\n    let parent,\n      path = this.path;\n    do {\n      // Skip method scope if coming from inside computed key or decorator expression\n      const shouldSkip = path.key === \"key\" || path.listKey === \"decorators\";\n      path = path.parentPath;\n      if (shouldSkip && path.isMethod()) path = path.parentPath;\n      if (path && path.isScope()) parent = path;\n    } while (path && !parent);\n\n    return parent?.scope;\n  }\n\n  get parentBlock() {\n    return this.path.parent;\n  }\n\n  get hub() {\n    return this.path.hub;\n  }\n\n  traverse<S>(\n    node: t.Node | t.Node[],\n    opts: TraverseOptions<S>,\n    state: S,\n  ): void;\n  traverse(node: t.Node | t.Node[], opts?: TraverseOptions, state?: any): void;\n  /**\n   * Traverse node with current scope and path.\n   *\n   * !!! WARNING !!!\n   * This method assumes that `this.path` is the NodePath representing `node`.\n   * After running the traversal, the `.parentPath` of the NodePaths\n   * corresponding to `node`'s children will be set to `this.path`.\n   *\n   * There is no good reason to use this method, since the only safe way to use\n   * it is equivalent to `scope.path.traverse(opts, state)`.\n   */\n  traverse<S>(node: any, opts: any, state?: S) {\n    traverse(node, opts, this, state, this.path);\n  }\n\n  /**\n   * Generate a unique identifier and add it to the current scope.\n   */\n\n  generateDeclaredUidIdentifier(name?: string) {\n    const id = this.generateUidIdentifier(name);\n    this.push({ id });\n    return cloneNode(id);\n  }\n\n  /**\n   * Generate a unique identifier.\n   */\n\n  generateUidIdentifier(name?: string) {\n    return identifier(this.generateUid(name));\n  }\n\n  /**\n   * Generate a unique `_id1` binding.\n   */\n\n  generateUid(name: string = \"temp\"): string {\n    name = toIdentifier(name)\n      .replace(/^_+/, \"\")\n      .replace(/[0-9]+$/g, \"\");\n\n    let uid;\n    let i = 1;\n    do {\n      uid = this._generateUid(name, i);\n      i++;\n    } while (\n      this.hasLabel(uid) ||\n      this.hasBinding(uid) ||\n      this.hasGlobal(uid) ||\n      this.hasReference(uid)\n    );\n\n    const program = this.getProgramParent();\n    program.references[uid] = true;\n    program.uids[uid] = true;\n\n    return uid;\n  }\n\n  /**\n   * Generate an `_id1`.\n   */\n\n  _generateUid(name: string, i: number) {\n    let id = name;\n    if (i > 1) id += i;\n    return `_${id}`;\n  }\n\n  generateUidBasedOnNode(node: t.Node, defaultName?: string) {\n    const parts: NodePart[] = [];\n    gatherNodeParts(node, parts);\n\n    let id = parts.join(\"$\");\n    id = id.replace(/^_/, \"\") || defaultName || \"ref\";\n\n    return this.generateUid(id.slice(0, 20));\n  }\n\n  /**\n   * Generate a unique identifier based on a node.\n   */\n\n  generateUidIdentifierBasedOnNode(node: t.Node, defaultName?: string) {\n    return identifier(this.generateUidBasedOnNode(node, defaultName));\n  }\n\n  /**\n   * Determine whether evaluating the specific input `node` is a consequenceless reference. ie.\n   * evaluating it wont result in potentially arbitrary code from being ran. The following are\n   * allowed and determined not to cause side effects:\n   *\n   *  - `this` expressions\n   *  - `super` expressions\n   *  - Bound identifiers\n   */\n\n  isStatic(node: t.Node): boolean {\n    if (isThisExpression(node) || isSuper(node) || isTopicReference(node)) {\n      return true;\n    }\n\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (binding) {\n        return binding.constant;\n      } else {\n        return this.hasBinding(node.name);\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Possibly generate a memoised identifier if it is not static and has consequences.\n   */\n\n  maybeGenerateMemoised(node: t.Node, dontPush?: boolean) {\n    if (this.isStatic(node)) {\n      return null;\n    } else {\n      const id = this.generateUidIdentifierBasedOnNode(node);\n      if (!dontPush) {\n        this.push({ id });\n        return cloneNode(id);\n      }\n      return id;\n    }\n  }\n\n  checkBlockScopedCollisions(\n    local: Binding,\n    kind: BindingKind,\n    name: string,\n    id: any,\n  ) {\n    // ignore parameters\n    if (kind === \"param\") return;\n\n    // Ignore existing binding if it's the name of the current function or\n    // class expression\n    if (local.kind === \"local\") return;\n\n    const duplicate =\n      // don't allow duplicate bindings to exist alongside\n      kind === \"let\" ||\n      local.kind === \"let\" ||\n      local.kind === \"const\" ||\n      local.kind === \"module\" ||\n      // don't allow a local of param with a kind of let\n      (local.kind === \"param\" && kind === \"const\");\n\n    if (duplicate) {\n      throw this.hub.buildError(\n        id,\n        `Duplicate declaration \"${name}\"`,\n        TypeError,\n      );\n    }\n  }\n\n  rename(\n    oldName: string,\n    newName?: string,\n    // prettier-ignore\n    /* Babel 7 - block?: t.Pattern | t.Scopable */\n  ) {\n    const binding = this.getBinding(oldName);\n    if (binding) {\n      newName ||= this.generateUidIdentifier(oldName).name;\n      const renamer = new Renamer(binding, oldName, newName);\n      if (process.env.BABEL_8_BREAKING) {\n        renamer.rename();\n      } else {\n        // @ts-ignore(Babel 7 vs Babel 8) TODO: Delete this\n        renamer.rename(arguments[2]);\n      }\n    }\n  }\n\n  /** @deprecated Not used in our codebase */\n  _renameFromMap(\n    map: Record<string | symbol, unknown>,\n    oldName: string | symbol,\n    newName: string | symbol,\n    value: unknown,\n  ) {\n    if (map[oldName]) {\n      map[newName] = value;\n      map[oldName] = null;\n    }\n  }\n\n  dump() {\n    const sep = \"-\".repeat(60);\n    console.log(sep);\n    let scope: Scope = this;\n    do {\n      console.log(\"#\", scope.block.type);\n      for (const name of Object.keys(scope.bindings)) {\n        const binding = scope.bindings[name];\n        console.log(\" -\", name, {\n          constant: binding.constant,\n          references: binding.references,\n          violations: binding.constantViolations.length,\n          kind: binding.kind,\n        });\n      }\n    } while ((scope = scope.parent));\n    console.log(sep);\n  }\n\n  // TODO: (Babel 8) Split i in two parameters, and use an object of flags\n  toArray(\n    node: t.Node,\n    i?: number | boolean,\n    arrayLikeIsIterable?: boolean | void,\n  ) {\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (binding?.constant && binding.path.isGenericType(\"Array\")) {\n        return node;\n      }\n    }\n\n    if (isArrayExpression(node)) {\n      return node;\n    }\n\n    if (isIdentifier(node, { name: \"arguments\" })) {\n      return callExpression(\n        memberExpression(\n          memberExpression(\n            memberExpression(identifier(\"Array\"), identifier(\"prototype\")),\n            identifier(\"slice\"),\n          ),\n          identifier(\"call\"),\n        ),\n        [node],\n      );\n    }\n\n    let helperName;\n    const args = [node];\n    if (i === true) {\n      // Used in array-spread to create an array.\n      helperName = \"toConsumableArray\";\n    } else if (typeof i === \"number\") {\n      args.push(numericLiteral(i));\n\n      // Used in array-rest to create an array from a subset of an iterable.\n      helperName = \"slicedToArray\";\n      // TODO if (this.hub.isLoose(\"es6.forOf\")) helperName += \"-loose\";\n    } else {\n      // Used in array-rest to create an array\n      helperName = \"toArray\";\n    }\n\n    if (arrayLikeIsIterable) {\n      args.unshift(this.hub.addHelper(helperName));\n      helperName = \"maybeArrayLike\";\n    }\n\n    // @ts-expect-error todo(flow->ts): t.Node is not valid to use in args, function argument typeneeds to be clarified\n    return callExpression(this.hub.addHelper(helperName), args);\n  }\n\n  hasLabel(name: string) {\n    return !!this.getLabel(name);\n  }\n\n  getLabel(name: string) {\n    return this.labels.get(name);\n  }\n\n  registerLabel(path: NodePath<t.LabeledStatement>) {\n    this.labels.set(path.node.label.name, path);\n  }\n\n  registerDeclaration(path: NodePath) {\n    if (path.isLabeledStatement()) {\n      this.registerLabel(path);\n    } else if (path.isFunctionDeclaration()) {\n      this.registerBinding(\"hoisted\", path.get(\"id\"), path);\n    } else if (path.isVariableDeclaration()) {\n      const declarations = path.get(\"declarations\");\n      const { kind } = path.node;\n      for (const declar of declarations) {\n        this.registerBinding(kind === \"using\" ? \"const\" : kind, declar);\n      }\n    } else if (path.isClassDeclaration()) {\n      if (path.node.declare) return;\n      this.registerBinding(\"let\", path);\n    } else if (path.isImportDeclaration()) {\n      const isTypeDeclaration =\n        path.node.importKind === \"type\" || path.node.importKind === \"typeof\";\n      const specifiers = path.get(\"specifiers\");\n      for (const specifier of specifiers) {\n        const isTypeSpecifier =\n          isTypeDeclaration ||\n          (specifier.isImportSpecifier() &&\n            (specifier.node.importKind === \"type\" ||\n              specifier.node.importKind === \"typeof\"));\n\n        this.registerBinding(isTypeSpecifier ? \"unknown\" : \"module\", specifier);\n      }\n    } else if (path.isExportDeclaration()) {\n      // todo: improve babel-types\n      const declar = path.get(\"declaration\") as NodePath;\n      if (\n        declar.isClassDeclaration() ||\n        declar.isFunctionDeclaration() ||\n        declar.isVariableDeclaration()\n      ) {\n        this.registerDeclaration(declar);\n      }\n    } else {\n      this.registerBinding(\"unknown\", path);\n    }\n  }\n\n  buildUndefinedNode() {\n    return unaryExpression(\"void\", numericLiteral(0), true);\n  }\n\n  registerConstantViolation(path: NodePath) {\n    const ids = path.getBindingIdentifiers();\n    for (const name of Object.keys(ids)) {\n      const binding = this.getBinding(name);\n      if (binding) binding.reassign(path);\n    }\n  }\n\n  registerBinding(\n    kind: Binding[\"kind\"],\n    path: NodePath,\n    bindingPath: NodePath = path,\n  ) {\n    if (!kind) throw new ReferenceError(\"no `kind`\");\n\n    if (path.isVariableDeclaration()) {\n      const declarators: Array<NodePath> = path.get(\"declarations\");\n      for (const declar of declarators) {\n        this.registerBinding(kind, declar);\n      }\n      return;\n    }\n\n    const parent = this.getProgramParent();\n    const ids = path.getOuterBindingIdentifiers(true);\n\n    for (const name of Object.keys(ids)) {\n      parent.references[name] = true;\n\n      for (const id of ids[name]) {\n        const local = this.getOwnBinding(name);\n\n        if (local) {\n          // same identifier so continue safely as we're likely trying to register it\n          // multiple times\n          if (local.identifier === id) continue;\n\n          this.checkBlockScopedCollisions(local, kind, name, id);\n        }\n\n        // A redeclaration of an existing variable is a modification\n        if (local) {\n          this.registerConstantViolation(bindingPath);\n        } else {\n          this.bindings[name] = new Binding({\n            identifier: id,\n            scope: this,\n            path: bindingPath,\n            kind: kind,\n          });\n        }\n      }\n    }\n  }\n\n  addGlobal(node: t.Identifier | t.JSXIdentifier) {\n    this.globals[node.name] = node;\n  }\n\n  hasUid(name: string): boolean {\n    let scope: Scope = this;\n\n    do {\n      if (scope.uids[name]) return true;\n    } while ((scope = scope.parent));\n\n    return false;\n  }\n\n  hasGlobal(name: string): boolean {\n    let scope: Scope = this;\n\n    do {\n      if (scope.globals[name]) return true;\n    } while ((scope = scope.parent));\n\n    return false;\n  }\n\n  hasReference(name: string): boolean {\n    return !!this.getProgramParent().references[name];\n  }\n\n  isPure(node: t.Node, constantsOnly?: boolean): boolean {\n    if (isIdentifier(node)) {\n      const binding = this.getBinding(node.name);\n      if (!binding) return false;\n      if (constantsOnly) return binding.constant;\n      return true;\n    } else if (\n      isThisExpression(node) ||\n      isMetaProperty(node) ||\n      isTopicReference(node) ||\n      isPrivateName(node)\n    ) {\n      return true;\n    } else if (isClass(node)) {\n      if (node.superClass && !this.isPure(node.superClass, constantsOnly)) {\n        return false;\n      }\n      if (node.decorators?.length > 0) {\n        return false;\n      }\n      return this.isPure(node.body, constantsOnly);\n    } else if (isClassBody(node)) {\n      for (const method of node.body) {\n        if (!this.isPure(method, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isBinary(node)) {\n      return (\n        this.isPure(node.left, constantsOnly) &&\n        this.isPure(node.right, constantsOnly)\n      );\n    } else if (isArrayExpression(node) || isTupleExpression(node)) {\n      for (const elem of node.elements) {\n        if (elem !== null && !this.isPure(elem, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isObjectExpression(node) || isRecordExpression(node)) {\n      for (const prop of node.properties) {\n        if (!this.isPure(prop, constantsOnly)) return false;\n      }\n      return true;\n    } else if (isMethod(node)) {\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      if (node.decorators?.length > 0) {\n        return false;\n      }\n      return true;\n    } else if (isProperty(node)) {\n      // @ts-expect-error todo(flow->ts): computed in not present on private properties\n      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;\n      if (node.decorators?.length > 0) {\n        return false;\n      }\n      if (isObjectProperty(node) || node.static) {\n        if (node.value !== null && !this.isPure(node.value, constantsOnly)) {\n          return false;\n        }\n      }\n      return true;\n    } else if (isUnaryExpression(node)) {\n      return this.isPure(node.argument, constantsOnly);\n    } else if (isTaggedTemplateExpression(node)) {\n      return (\n        matchesPattern(node.tag, \"String.raw\") &&\n        !this.hasBinding(\"String\", true) &&\n        this.isPure(node.quasi, constantsOnly)\n      );\n    } else if (isTemplateLiteral(node)) {\n      for (const expression of node.expressions) {\n        if (!this.isPure(expression, constantsOnly)) return false;\n      }\n      return true;\n    } else {\n      return isPureish(node);\n    }\n  }\n\n  /**\n   * Set some arbitrary data on the current scope.\n   */\n\n  setData(key: string | symbol, val: any) {\n    return (this.data[key] = val);\n  }\n\n  /**\n   * Recursively walk up scope tree looking for the data `key`.\n   */\n\n  getData(key: string | symbol): any {\n    let scope: Scope = this;\n    do {\n      const data = scope.data[key];\n      if (data != null) return data;\n    } while ((scope = scope.parent));\n  }\n\n  /**\n   * Recursively walk up scope tree looking for the data `key` and if it exists,\n   * remove it.\n   */\n\n  removeData(key: string) {\n    let scope: Scope = this;\n    do {\n      const data = scope.data[key];\n      if (data != null) scope.data[key] = null;\n    } while ((scope = scope.parent));\n  }\n\n  init() {\n    if (!this.inited) {\n      this.inited = true;\n      this.crawl();\n    }\n  }\n\n  crawl() {\n    const path = this.path;\n\n    this.references = Object.create(null);\n    this.bindings = Object.create(null);\n    this.globals = Object.create(null);\n    this.uids = Object.create(null);\n    this.data = Object.create(null);\n\n    const programParent = this.getProgramParent();\n    if (programParent.crawling) return;\n\n    const state: CollectVisitorState = {\n      references: [],\n      constantViolations: [],\n      assignments: [],\n    };\n\n    this.crawling = true;\n    // traverse does not visit the root node, here we explicitly collect\n    // root node binding info when the root is not a Program.\n    if (path.type !== \"Program\" && collectorVisitor._exploded) {\n      // @ts-expect-error when collectorVisitor is exploded, `enter` always exists\n      for (const visit of collectorVisitor.enter) {\n        visit(path, state);\n      }\n      const typeVisitors = collectorVisitor[path.type];\n      if (typeVisitors) {\n        // @ts-expect-error when collectorVisitor is exploded, `enter` always exists\n        for (const visit of typeVisitors.enter) {\n          visit(path, state);\n        }\n      }\n    }\n    path.traverse(collectorVisitor, state);\n    this.crawling = false;\n\n    // register assignments\n    for (const path of state.assignments) {\n      // register undeclared bindings as globals\n      const ids = path.getBindingIdentifiers();\n      for (const name of Object.keys(ids)) {\n        if (path.scope.getBinding(name)) continue;\n        programParent.addGlobal(ids[name]);\n      }\n\n      // register as constant violation\n      path.scope.registerConstantViolation(path);\n    }\n\n    // register references\n    for (const ref of state.references) {\n      const binding = ref.scope.getBinding(ref.node.name);\n      if (binding) {\n        binding.reference(ref);\n      } else {\n        programParent.addGlobal(ref.node);\n      }\n    }\n\n    // register constant violations\n    for (const path of state.constantViolations) {\n      path.scope.registerConstantViolation(path);\n    }\n  }\n\n  push(opts: {\n    id: t.LVal;\n    init?: t.Expression;\n    unique?: boolean;\n    _blockHoist?: number | undefined;\n    kind?: \"var\" | \"let\" | \"const\";\n  }) {\n    let path = this.path;\n\n    if (path.isPattern()) {\n      path = this.getPatternParent().path;\n    } else if (!path.isBlockStatement() && !path.isProgram()) {\n      path = this.getBlockParent().path;\n    }\n\n    if (path.isSwitchStatement()) {\n      path = (this.getFunctionParent() || this.getProgramParent()).path;\n    }\n\n    if (path.isLoop() || path.isCatchClause() || path.isFunction()) {\n      // @ts-expect-error TS can not infer NodePath<Loop> | NodePath<CatchClause> as NodePath<Loop | CatchClause>\n      path.ensureBlock();\n      // @ts-expect-error todo(flow->ts): improve types\n      path = path.get(\"body\");\n    }\n\n    const unique = opts.unique;\n    const kind = opts.kind || \"var\";\n    const blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;\n\n    const dataKey = `declaration:${kind}:${blockHoist}`;\n    let declarPath = !unique && path.getData(dataKey);\n\n    if (!declarPath) {\n      const declar = variableDeclaration(kind, []);\n      // @ts-expect-error todo(flow->ts): avoid modifying nodes\n      declar._blockHoist = blockHoist;\n\n      [declarPath] = (path as NodePath<t.BlockStatement>).unshiftContainer(\n        \"body\",\n        [declar],\n      );\n      if (!unique) path.setData(dataKey, declarPath);\n    }\n\n    const declarator = variableDeclarator(opts.id, opts.init);\n    const len = declarPath.node.declarations.push(declarator);\n    path.scope.registerBinding(kind, declarPath.get(\"declarations\")[len - 1]);\n  }\n\n  /**\n   * Walk up to the top of the scope tree and get the `Program`.\n   */\n\n  getProgramParent() {\n    let scope: Scope = this;\n    do {\n      if (scope.path.isProgram()) {\n        return scope;\n      }\n    } while ((scope = scope.parent));\n    throw new Error(\"Couldn't find a Program\");\n  }\n\n  /**\n   * Walk up the scope tree until we hit either a Function or return null.\n   */\n\n  getFunctionParent(): Scope | null {\n    let scope: Scope = this;\n    do {\n      if (scope.path.isFunctionParent()) {\n        return scope;\n      }\n    } while ((scope = scope.parent));\n    return null;\n  }\n\n  /**\n   * Walk up the scope tree until we hit either a BlockStatement/Loop/Program/Function/Switch or reach the\n   * very top and hit Program.\n   */\n\n  getBlockParent() {\n    let scope: Scope = this;\n    do {\n      if (scope.path.isBlockParent()) {\n        return scope;\n      }\n    } while ((scope = scope.parent));\n    throw new Error(\n      \"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\",\n    );\n  }\n\n  /**\n   * Walk up from a pattern scope (function param initializer) until we hit a non-pattern scope,\n   * then returns its block parent\n   * @returns An ancestry scope whose path is a block parent\n   */\n  getPatternParent() {\n    let scope: Scope = this;\n    do {\n      if (!scope.path.isPattern()) {\n        return scope.getBlockParent();\n      }\n    } while ((scope = scope.parent.parent));\n    throw new Error(\n      \"We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...\",\n    );\n  }\n\n  /**\n   * Walks the scope tree and gathers **all** bindings.\n   */\n\n  getAllBindings(): Record<string, Binding> {\n    const ids = Object.create(null);\n\n    let scope: Scope = this;\n    do {\n      for (const key of Object.keys(scope.bindings)) {\n        if (key in ids === false) {\n          ids[key] = scope.bindings[key];\n        }\n      }\n      scope = scope.parent;\n    } while (scope);\n\n    return ids;\n  }\n\n  /**\n   * Walks the scope tree and gathers all declarations of `kind`.\n   */\n\n  getAllBindingsOfKind(...kinds: string[]): Record<string, Binding> {\n    const ids = Object.create(null);\n\n    for (const kind of kinds) {\n      let scope: Scope = this;\n      do {\n        for (const name of Object.keys(scope.bindings)) {\n          const binding = scope.bindings[name];\n          if (binding.kind === kind) ids[name] = binding;\n        }\n        scope = scope.parent;\n      } while (scope);\n    }\n\n    return ids;\n  }\n\n  bindingIdentifierEquals(name: string, node: t.Node): boolean {\n    return this.getBindingIdentifier(name) === node;\n  }\n\n  getBinding(name: string): Binding | undefined {\n    let scope: Scope = this;\n    let previousPath;\n\n    do {\n      const binding = scope.getOwnBinding(name);\n      if (binding) {\n        // Check if a pattern is a part of parameter expressions.\n        // Note: for performance reason we skip checking previousPath.parentPath.isFunction()\n        // because `scope.path` is validated as scope in packages/babel-types/src/validators/isScope.js\n        // That is, if a scope path is pattern, its parent must be Function/CatchClause\n\n        // Spec 9.2.10.28: The closure created by this expression should not have visibility of\n        // declarations in the function body. If the binding is not a `param`-kind (as function parameters)\n        // or `local`-kind (as id in function expression),\n        // then it must be defined inside the function body, thus it should be skipped\n        if (\n          previousPath?.isPattern() &&\n          binding.kind !== \"param\" &&\n          binding.kind !== \"local\"\n        ) {\n          // do nothing\n        } else {\n          return binding;\n        }\n      } else if (\n        !binding &&\n        name === \"arguments\" &&\n        scope.path.isFunction() &&\n        !scope.path.isArrowFunctionExpression()\n      ) {\n        break;\n      }\n      previousPath = scope.path;\n    } while ((scope = scope.parent));\n  }\n\n  getOwnBinding(name: string): Binding | undefined {\n    return this.bindings[name];\n  }\n\n  // todo: return probably can be undefined…\n  getBindingIdentifier(name: string): t.Identifier {\n    return this.getBinding(name)?.identifier;\n  }\n\n  // todo: flow->ts return probably can be undefined\n  getOwnBindingIdentifier(name: string): t.Identifier {\n    const binding = this.bindings[name];\n    return binding?.identifier;\n  }\n\n  hasOwnBinding(name: string) {\n    return !!this.getOwnBinding(name);\n  }\n\n  // By default, we consider generated UIDs as bindings.\n  // This is because they are almost always used to declare variables,\n  // and since the scope isn't always up-to-date it's better to assume that\n  // there is a variable with that name. The `noUids` option can be used to\n  // turn off this behavior, for example if you know that the generate UID\n  // was used to declare a variable in a different scope.\n  hasBinding(\n    name: string,\n    opts?: boolean | { noGlobals?: boolean; noUids?: boolean },\n  ) {\n    if (!name) return false;\n    if (this.hasOwnBinding(name)) return true;\n    {\n      // TODO: Only accept the object form.\n      if (typeof opts === \"boolean\") opts = { noGlobals: opts };\n    }\n    if (this.parentHasBinding(name, opts)) return true;\n    if (!opts?.noUids && this.hasUid(name)) return true;\n    if (!opts?.noGlobals && Scope.globals.includes(name)) return true;\n    if (!opts?.noGlobals && Scope.contextVariables.includes(name)) return true;\n    return false;\n  }\n\n  parentHasBinding(\n    name: string,\n    opts?: { noGlobals?: boolean; noUids?: boolean },\n  ) {\n    return this.parent?.hasBinding(name, opts);\n  }\n\n  /**\n   * Move a binding of `name` to another `scope`.\n   */\n\n  moveBindingTo(name: string, scope: Scope) {\n    const info = this.getBinding(name);\n    if (info) {\n      info.scope.removeOwnBinding(name);\n      info.scope = scope;\n      scope.bindings[name] = info;\n    }\n  }\n\n  removeOwnBinding(name: string) {\n    delete this.bindings[name];\n  }\n\n  removeBinding(name: string) {\n    // clear literal binding\n    this.getBinding(name)?.scope.removeOwnBinding(name);\n\n    // clear uids with this name - https://github.com/babel/babel/issues/2101\n    let scope: Scope = this;\n    do {\n      if (scope.uids[name]) {\n        scope.uids[name] = false;\n      }\n    } while ((scope = scope.parent));\n  }\n}\n"],"mappings":"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"}