{"version":3,"names":["virtualTypes","buildDebug","traverse","Scope","_t","validate","t","path","pathCache","generator","NodePath_ancestry","NodePath_inference","NodePath_replacement","NodePath_evaluation","NodePath_conversion","NodePath_introspection","NodePath_context","NodePath_removal","NodePath_modification","NodePath_family","NodePath_comments","NodePath_virtual_types_validator","debug","REMOVED","SHOULD_STOP","SHOULD_SKIP","NodePath","constructor","hub","parent","contexts","state","opts","_traverseFlags","skipKeys","parentPath","container","listKey","key","node","type","data","context","scope","get","Error","targetNode","paths","Map","set","setup","getScope","isScope","setData","val","Object","create","getData","def","undefined","hasNode","buildCodeFrameError","msg","SyntaxError","buildError","visitor","getPathLocation","parts","inList","unshift","join","message","enabled","toString","code","parentKey","shouldSkip","v","shouldStop","removed","assign","prototype","_guessExecutionStatusRelativeToDifferentFunctions","_guessExecutionStatusRelativeTo","TYPES","typeKey","fn","TypeError","keys","includes","push"],"sources":["../../src/path/index.ts"],"sourcesContent":["import type { HubInterface } from \"../hub\";\nimport type TraversalContext from \"../context\";\nimport * as virtualTypes from \"./lib/virtual-types\";\nimport buildDebug from \"debug\";\nimport traverse from \"../index\";\nimport type { Visitor } from \"../types\";\nimport Scope from \"../scope\";\nimport { validate } from \"@babel/types\";\nimport * as t from \"@babel/types\";\nimport { path as pathCache } from \"../cache\";\nimport generator from \"@babel/generator\";\n\n// NodePath is split across many files.\nimport * as NodePath_ancestry from \"./ancestry\";\nimport * as NodePath_inference from \"./inference\";\nimport * as NodePath_replacement from \"./replacement\";\nimport * as NodePath_evaluation from \"./evaluation\";\nimport * as NodePath_conversion from \"./conversion\";\nimport * as NodePath_introspection from \"./introspection\";\nimport * as NodePath_context from \"./context\";\nimport * as NodePath_removal from \"./removal\";\nimport * as NodePath_modification from \"./modification\";\nimport * as NodePath_family from \"./family\";\nimport * as NodePath_comments from \"./comments\";\nimport * as NodePath_virtual_types_validator from \"./lib/virtual-types-validator\";\nimport type { NodePathAssertions } from \"./generated/asserts\";\nimport type { NodePathValidators } from \"./generated/validators\";\n\nconst debug = buildDebug(\"babel\");\n\nexport const REMOVED = 1 << 0;\nexport const SHOULD_STOP = 1 << 1;\nexport const SHOULD_SKIP = 1 << 2;\n\nclass NodePath<T extends t.Node = t.Node> {\n  constructor(hub: HubInterface, parent: t.ParentMaps[T[\"type\"]]) {\n    this.parent = parent;\n    this.hub = hub;\n    this.data = null;\n\n    this.context = null;\n    this.scope = null;\n  }\n\n  declare parent: t.ParentMaps[T[\"type\"]];\n  declare hub: HubInterface;\n  declare data: Record<string | symbol, unknown>;\n  // TraversalContext is configured by setContext\n  declare context: TraversalContext;\n  declare scope: Scope;\n\n  contexts: Array<TraversalContext> = [];\n  state: any = null;\n  opts: any = null;\n  // this.shouldSkip = false; this.shouldStop = false; this.removed = false;\n  _traverseFlags: number = 0;\n  skipKeys: any = null;\n  parentPath: t.ParentMaps[T[\"type\"]] extends null\n    ? null\n    : NodePath<t.ParentMaps[T[\"type\"]]> | null = null;\n  container: t.Node | Array<t.Node> | null = null;\n  listKey: string | null = null;\n  key: string | number | null = null;\n  node: T = null;\n  type: T[\"type\"] | null = null;\n\n  static get({\n    hub,\n    parentPath,\n    parent,\n    container,\n    listKey,\n    key,\n  }: {\n    hub?: HubInterface;\n    parentPath: NodePath | null;\n    parent: t.Node;\n    container: t.Node | t.Node[];\n    listKey?: string;\n    key: string | number;\n  }): NodePath {\n    if (!hub && parentPath) {\n      hub = parentPath.hub;\n    }\n\n    if (!parent) {\n      throw new Error(\"To get a node path the parent needs to exist\");\n    }\n\n    const targetNode =\n      // @ts-expect-error key must present in container\n      container[key];\n\n    let paths = pathCache.get(parent);\n    if (!paths) {\n      paths = new Map();\n      pathCache.set(parent, paths);\n    }\n\n    let path = paths.get(targetNode);\n    if (!path) {\n      path = new NodePath(hub, parent);\n      if (targetNode) paths.set(targetNode, path);\n    }\n\n    path.setup(parentPath, container, listKey, key);\n\n    return path;\n  }\n\n  getScope(scope: Scope): Scope {\n    return this.isScope() ? new Scope(this) : scope;\n  }\n\n  setData(key: string | symbol, val: any): any {\n    if (this.data == null) {\n      this.data = Object.create(null);\n    }\n    return (this.data[key] = val);\n  }\n\n  getData(key: string | symbol, def?: any): any {\n    if (this.data == null) {\n      this.data = Object.create(null);\n    }\n    let val = this.data[key];\n    if (val === undefined && def !== undefined) val = this.data[key] = def;\n    return val;\n  }\n\n  hasNode(): this is NodePath<NonNullable<this[\"node\"]>> {\n    return this.node != null;\n  }\n\n  buildCodeFrameError(\n    msg: string,\n    Error: new () => Error = SyntaxError,\n  ): Error {\n    return this.hub.buildError(this.node, msg, Error);\n  }\n\n  traverse<T>(visitor: Visitor<T>, state: T): void;\n  traverse(visitor: Visitor): void;\n  traverse(visitor: any, state?: any) {\n    traverse(this.node, visitor, this.scope, state, this);\n  }\n\n  set(key: string, node: any) {\n    validate(this.node, key, node);\n    // @ts-expect-error key must present in this.node\n    this.node[key] = node;\n  }\n\n  getPathLocation(): string {\n    const parts = [];\n    let path: NodePath = this;\n    do {\n      let key = path.key;\n      if (path.inList) key = `${path.listKey}[${key}]`;\n      parts.unshift(key);\n    } while ((path = path.parentPath));\n    return parts.join(\".\");\n  }\n\n  debug(message: string) {\n    if (!debug.enabled) return;\n    debug(`${this.getPathLocation()} ${this.type}: ${message}`);\n  }\n\n  toString() {\n    return generator(this.node).code;\n  }\n\n  get inList() {\n    return !!this.listKey;\n  }\n\n  set inList(inList) {\n    if (!inList) {\n      this.listKey = null;\n    }\n    // ignore inList = true as it should depend on `listKey`\n  }\n\n  get parentKey(): string {\n    return (this.listKey || this.key) as string;\n  }\n\n  get shouldSkip() {\n    return !!(this._traverseFlags & SHOULD_SKIP);\n  }\n\n  set shouldSkip(v) {\n    if (v) {\n      this._traverseFlags |= SHOULD_SKIP;\n    } else {\n      this._traverseFlags &= ~SHOULD_SKIP;\n    }\n  }\n\n  get shouldStop() {\n    return !!(this._traverseFlags & SHOULD_STOP);\n  }\n\n  set shouldStop(v) {\n    if (v) {\n      this._traverseFlags |= SHOULD_STOP;\n    } else {\n      this._traverseFlags &= ~SHOULD_STOP;\n    }\n  }\n\n  get removed() {\n    return !!(this._traverseFlags & REMOVED);\n  }\n  set removed(v) {\n    if (v) {\n      this._traverseFlags |= REMOVED;\n    } else {\n      this._traverseFlags &= ~REMOVED;\n    }\n  }\n}\n\nObject.assign(\n  NodePath.prototype,\n  NodePath_ancestry,\n  NodePath_inference,\n  NodePath_replacement,\n  NodePath_evaluation,\n  NodePath_conversion,\n  NodePath_introspection,\n  NodePath_context,\n  NodePath_removal,\n  NodePath_modification,\n  NodePath_family,\n  NodePath_comments,\n);\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error The original _guessExecutionStatusRelativeToDifferentFunctions only worked for paths in\n  // different functions, but _guessExecutionStatusRelativeTo works as a replacement in those cases.\n  NodePath.prototype._guessExecutionStatusRelativeToDifferentFunctions =\n    NodePath_introspection._guessExecutionStatusRelativeTo;\n}\n\n// we can not use `import { TYPES } from \"@babel/types\"` here\n// because the transformNamedBabelTypesImportToDestructuring plugin in babel.config.js\n// does not offer live bindings for `TYPES`\n// we can change to `import { TYPES }` when we are publishing ES modules only\nfor (const type of t.TYPES) {\n  const typeKey = `is${type}`;\n  // @ts-expect-error typeKey must present in t\n  const fn = t[typeKey];\n  // @ts-expect-error augmenting NodePath prototype\n  NodePath.prototype[typeKey] = function (opts: any) {\n    return fn(this.node, opts);\n  };\n\n  // @ts-expect-error augmenting NodePath prototype\n  NodePath.prototype[`assert${type}`] = function (opts: any) {\n    if (!fn(this.node, opts)) {\n      throw new TypeError(`Expected node path of type ${type}`);\n    }\n  };\n}\n\n// Register virtual types validators after base types validators\nObject.assign(NodePath.prototype, NodePath_virtual_types_validator);\n\nfor (const type of Object.keys(virtualTypes) as (keyof typeof virtualTypes)[]) {\n  if (type[0] === \"_\") continue;\n  if (!t.TYPES.includes(type)) t.TYPES.push(type);\n}\n\ntype NodePathMixins = typeof NodePath_ancestry &\n  typeof NodePath_inference &\n  typeof NodePath_replacement &\n  typeof NodePath_evaluation &\n  typeof NodePath_conversion &\n  typeof NodePath_introspection &\n  typeof NodePath_context &\n  typeof NodePath_removal &\n  typeof NodePath_modification &\n  typeof NodePath_family &\n  typeof NodePath_comments;\n\n// @ts-expect-error TS throws because ensureBlock returns the body node path\n// however, we don't use the return value and treat it as a transform and\n// assertion utilities. For better type inference we annotate it as an\n// assertion method\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface NodePath<T>\n  extends NodePathAssertions,\n    NodePathValidators,\n    NodePathMixins {\n  /**\n   * @see ./conversion.ts for implementation\n   */\n  ensureBlock<\n    T extends\n      | t.Loop\n      | t.WithStatement\n      | t.Function\n      | t.LabeledStatement\n      | t.CatchClause,\n  >(\n    this: NodePath<T>,\n  ): asserts this is NodePath<T & { body: t.BlockStatement }>;\n}\n\nexport default NodePath;\n"],"mappings":"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"}