{"version":3,"names":["codeFrameColumns","traverse","NodePath","path","pathCache","parse","_t","FUNCTION_TYPES","arrowFunctionExpression","assignmentExpression","awaitExpression","blockStatement","callExpression","cloneNode","expressionStatement","identifier","inheritLeadingComments","inheritTrailingComments","inheritsComments","isExpression","isProgram","isStatement","removeComments","returnStatement","toSequenceExpression","validate","yieldExpression","hoistVariables","replaceWithMultiple","nodes","_pathCache$get","resync","_verifyNodeList","node","length","get","parent","delete","container","key","paths","insertAfter","requeue","remove","replaceWithSourceString","replacement","ast","err","loc","message","start","line","column","code","expressionAST","program","body","expression","removeProperties","replaceWith","replacementPath","removed","Error","Array","isArray","nodePath","isNodeType","canHaveVariableDeclarationOrExpression","canSwapBetweenExpressionAndStatement","parentPath","isExportDefaultDeclaration","replaceExpressionWithStatements","oldNode","_replaceWith","type","setScope","_pathCache$get2","ReferenceError","inList","debug","set","nodesAsSequenceExpression","scope","functionParent","getFunctionParent","isParentAsync","is","isParentGenerator","callee","id","push","completionRecords","getCompletionRecords","isExpressionStatement","loop","findParent","isLoop","uid","getData","generateDeclaredUidIdentifier","pushContainer","setData","name","arrowFunctionToExpression","newCallee","needToAwaitFunction","hasType","needToYieldFunction","replaceInline","_containerInsertAfter"],"sources":["../../src/path/replacement.ts"],"sourcesContent":["// This file contains methods responsible for replacing a node with another.\n\nimport { codeFrameColumns } from \"@babel/code-frame\";\nimport traverse from \"../index\";\nimport NodePath from \"./index\";\nimport { path as pathCache } from \"../cache\";\nimport { parse } from \"@babel/parser\";\nimport {\n  FUNCTION_TYPES,\n  arrowFunctionExpression,\n  assignmentExpression,\n  awaitExpression,\n  blockStatement,\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  identifier,\n  inheritLeadingComments,\n  inheritTrailingComments,\n  inheritsComments,\n  isExpression,\n  isProgram,\n  isStatement,\n  removeComments,\n  returnStatement,\n  toSequenceExpression,\n  validate,\n  yieldExpression,\n} from \"@babel/types\";\nimport type * as t from \"@babel/types\";\nimport hoistVariables from \"@babel/helper-hoist-variables\";\n\n/**\n * Replace a node with an array of multiple. This method performs the following steps:\n *\n *  - Inherit the comments of first provided node with that of the current node.\n *  - Insert the provided nodes after the current node.\n *  - Remove the current node.\n */\n\nexport function replaceWithMultiple(\n  this: NodePath,\n  nodes: t.Node | t.Node[],\n): NodePath[] {\n  this.resync();\n\n  nodes = this._verifyNodeList(nodes);\n  inheritLeadingComments(nodes[0], this.node);\n  inheritTrailingComments(nodes[nodes.length - 1], this.node);\n  pathCache.get(this.parent)?.delete(this.node);\n  this.node =\n    // @ts-expect-error this.key must present in this.container\n    this.container[this.key] = null;\n  const paths = this.insertAfter(nodes);\n\n  if (this.node) {\n    this.requeue();\n  } else {\n    this.remove();\n  }\n  return paths;\n}\n\n/**\n * Parse a string as an expression and replace the current node with the result.\n *\n * NOTE: This is typically not a good idea to use. Building source strings when\n * transforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's\n * easier to use, your transforms will be extremely brittle.\n */\n\nexport function replaceWithSourceString(this: NodePath, replacement: string) {\n  this.resync();\n  let ast: t.File;\n\n  try {\n    replacement = `(${replacement})`;\n    // @ts-expect-error todo: use babel-types ast typings in Babel parser\n    ast = parse(replacement);\n  } catch (err) {\n    const loc = err.loc;\n    if (loc) {\n      err.message +=\n        \" - make sure this is an expression.\\n\" +\n        codeFrameColumns(replacement, {\n          start: {\n            line: loc.line,\n            column: loc.column + 1,\n          },\n        });\n      err.code = \"BABEL_REPLACE_SOURCE_ERROR\";\n    }\n    throw err;\n  }\n\n  const expressionAST = (ast.program.body[0] as t.ExpressionStatement)\n    .expression;\n  traverse.removeProperties(expressionAST);\n  return this.replaceWith(expressionAST);\n}\n\n/**\n * Replace the current node with another.\n */\n\nexport function replaceWith<R extends t.Node>(\n  this: NodePath,\n  replacementPath: R | NodePath<R>,\n): [NodePath<R>] {\n  this.resync();\n\n  if (this.removed) {\n    throw new Error(\"You can't replace this node, we've already removed it\");\n  }\n\n  let replacement: t.Node =\n    replacementPath instanceof NodePath\n      ? replacementPath.node\n      : replacementPath;\n\n  if (!replacement) {\n    throw new Error(\n      \"You passed `path.replaceWith()` a falsy node, use `path.remove()` instead\",\n    );\n  }\n\n  if (this.node === replacement) {\n    return [this as NodePath<R>];\n  }\n\n  if (this.isProgram() && !isProgram(replacement)) {\n    throw new Error(\n      \"You can only replace a Program root node with another Program node\",\n    );\n  }\n\n  if (Array.isArray(replacement)) {\n    throw new Error(\n      \"Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`\",\n    );\n  }\n\n  if (typeof replacement === \"string\") {\n    throw new Error(\n      \"Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`\",\n    );\n  }\n\n  let nodePath = \"\";\n\n  if (this.isNodeType(\"Statement\") && isExpression(replacement)) {\n    if (\n      !this.canHaveVariableDeclarationOrExpression() &&\n      !this.canSwapBetweenExpressionAndStatement(replacement) &&\n      !this.parentPath.isExportDefaultDeclaration()\n    ) {\n      // replacing a statement with an expression so wrap it in an expression statement\n      replacement = expressionStatement(replacement);\n      nodePath = \"expression\";\n    }\n  }\n\n  if (this.isNodeType(\"Expression\") && isStatement(replacement)) {\n    if (\n      !this.canHaveVariableDeclarationOrExpression() &&\n      !this.canSwapBetweenExpressionAndStatement(replacement)\n    ) {\n      // replacing an expression with a statement so let's explode it\n      return this.replaceExpressionWithStatements([replacement]) as [\n        NodePath<R>,\n      ];\n    }\n  }\n\n  const oldNode = this.node;\n  if (oldNode) {\n    inheritsComments(replacement, oldNode);\n    removeComments(oldNode);\n  }\n\n  // replace the node\n  this._replaceWith(replacement);\n  this.type = replacement.type;\n\n  // potentially create new scope\n  this.setScope();\n\n  // requeue for visiting\n  this.requeue();\n\n  return [\n    nodePath ? (this.get(nodePath) as NodePath<R>) : (this as NodePath<R>),\n  ];\n}\n\n/**\n * Description\n */\n\nexport function _replaceWith(this: NodePath, node: t.Node) {\n  if (!this.container) {\n    throw new ReferenceError(\"Container is falsy\");\n  }\n\n  if (this.inList) {\n    // @ts-expect-error todo(flow->ts): check if validate accepts a numeric key\n    validate(this.parent, this.key, [node]);\n  } else {\n    validate(this.parent, this.key as string, node);\n  }\n\n  this.debug(`Replace with ${node?.type}`);\n  pathCache.get(this.parent)?.set(node, this).delete(this.node);\n\n  this.node =\n    // @ts-expect-error this.key must present in this.container\n    this.container[this.key] = node;\n}\n\n/**\n * This method takes an array of statements nodes and then explodes it\n * into expressions. This method retains completion records which is\n * extremely important to retain original semantics.\n */\n\nexport function replaceExpressionWithStatements(\n  this: NodePath,\n  nodes: Array<t.Statement>,\n) {\n  this.resync();\n\n  const nodesAsSequenceExpression = toSequenceExpression(nodes, this.scope);\n\n  if (nodesAsSequenceExpression) {\n    return this.replaceWith(nodesAsSequenceExpression)[0].get(\"expressions\");\n  }\n\n  const functionParent = this.getFunctionParent();\n  const isParentAsync = functionParent?.is(\"async\");\n  const isParentGenerator = functionParent?.is(\"generator\");\n\n  const container = arrowFunctionExpression([], blockStatement(nodes));\n\n  this.replaceWith(callExpression(container, []));\n  // replaceWith changes the type of \"this\", but it isn't trackable by TS\n  type ThisType = NodePath<\n    t.CallExpression & {\n      callee: t.ArrowFunctionExpression & { body: t.BlockStatement };\n    }\n  >;\n\n  // hoist variable declaration in do block\n  // `(do { var x = 1; x;})` -> `var x; (() => { x = 1; return x; })()`\n  const callee = (this as ThisType).get(\"callee\");\n  hoistVariables(\n    callee.get(\"body\"),\n    (id: t.Identifier) => {\n      this.scope.push({ id });\n    },\n    \"var\",\n  );\n\n  // add implicit returns to all ending expression statements\n  const completionRecords: Array<NodePath> = (this as ThisType)\n    .get(\"callee\")\n    .getCompletionRecords();\n  for (const path of completionRecords) {\n    if (!path.isExpressionStatement()) continue;\n\n    const loop = path.findParent(path => path.isLoop());\n    if (loop) {\n      let uid = loop.getData(\"expressionReplacementReturnUid\");\n\n      if (!uid) {\n        uid = callee.scope.generateDeclaredUidIdentifier(\"ret\");\n        callee\n          .get(\"body\")\n          .pushContainer(\"body\", returnStatement(cloneNode(uid)));\n        loop.setData(\"expressionReplacementReturnUid\", uid);\n      } else {\n        uid = identifier(uid.name);\n      }\n\n      path\n        .get(\"expression\")\n        .replaceWith(\n          assignmentExpression(\"=\", cloneNode(uid), path.node.expression),\n        );\n    } else {\n      path.replaceWith(returnStatement(path.node.expression));\n    }\n  }\n\n  // This is an IIFE, so we don't need to worry about the noNewArrows assumption\n  callee.arrowFunctionToExpression();\n  // Fixme: we can not `assert this is NodePath<t.FunctionExpression>` in `arrowFunctionToExpression`\n  // because it is not a class method known at compile time.\n  const newCallee = callee as unknown as NodePath<t.FunctionExpression>;\n\n  // (() => await xxx)() -> await (async () => await xxx)();\n  const needToAwaitFunction =\n    isParentAsync &&\n    traverse.hasType(\n      (this.get(\"callee.body\") as NodePath<t.BlockStatement>).node,\n      \"AwaitExpression\",\n      FUNCTION_TYPES,\n    );\n  const needToYieldFunction =\n    isParentGenerator &&\n    traverse.hasType(\n      (this.get(\"callee.body\") as NodePath<t.BlockStatement>).node,\n      \"YieldExpression\",\n      FUNCTION_TYPES,\n    );\n  if (needToAwaitFunction) {\n    newCallee.set(\"async\", true);\n    // yield* will await the generator return result\n    if (!needToYieldFunction) {\n      this.replaceWith(awaitExpression((this as ThisType).node));\n    }\n  }\n  if (needToYieldFunction) {\n    newCallee.set(\"generator\", true);\n    this.replaceWith(yieldExpression((this as ThisType).node, true));\n  }\n\n  return newCallee.get(\"body.body\");\n}\n\nexport function replaceInline(this: NodePath, nodes: t.Node | Array<t.Node>) {\n  this.resync();\n\n  if (Array.isArray(nodes)) {\n    if (Array.isArray(this.container)) {\n      nodes = this._verifyNodeList(nodes);\n      const paths = this._containerInsertAfter(nodes);\n      this.remove();\n      return paths;\n    } else {\n      return this.replaceWithMultiple(nodes);\n    }\n  } else {\n    return this.replaceWith(nodes);\n  }\n}\n"],"mappings":"AAEA,SAASA,gBAAgB,QAAQ,mBAAmB;AACpD,OAAOC,QAAQ,MAAM,aAAU;AAC/B,OAAOC,QAAQ,MAAM,YAAS;AAC9B,SAASC,IAAI,IAAIC,SAAS,QAAQ,aAAU;AAC5C,SAASC,KAAK,QAAQ,eAAe;AACrC,YAAAC,EAAA,MAqBO,cAAc;AAAC;EApBpBC,cAAc;EACdC,uBAAuB;EACvBC,oBAAoB;EACpBC,eAAe;EACfC,cAAc;EACdC,cAAc;EACdC,SAAS;EACTC,mBAAmB;EACnBC,UAAU;EACVC,sBAAsB;EACtBC,uBAAuB;EACvBC,gBAAgB;EAChBC,YAAY;EACZC,SAAS;EACTC,WAAW;EACXC,cAAc;EACdC,eAAe;EACfC,oBAAoB;EACpBC,QAAQ;EACRC;AAAe,IAAApB,EAAA;AAGjB,OAAOqB,cAAc,MAAM,+BAA+B;AAU1D,OAAO,SAASC,mBAAmBA,CAEjCC,KAAwB,EACZ;EAAA,IAAAC,cAAA;EACZ,IAAI,CAACC,MAAM,EAAE;EAEbF,KAAK,GAAG,IAAI,CAACG,eAAe,CAACH,KAAK,CAAC;EACnCb,sBAAsB,CAACa,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAACI,IAAI,CAAC;EAC3ChB,uBAAuB,CAACY,KAAK,CAACA,KAAK,CAACK,MAAM,GAAG,CAAC,CAAC,EAAE,IAAI,CAACD,IAAI,CAAC;EAC3D,CAAAH,cAAA,GAAA1B,SAAS,CAAC+B,GAAG,CAAC,IAAI,CAACC,MAAM,CAAC,qBAA1BN,cAAA,CAA4BO,MAAM,CAAC,IAAI,CAACJ,IAAI,CAAC;EAC7C,IAAI,CAACA,IAAI,GAEP,IAAI,CAACK,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,GAAG,IAAI;EACjC,MAAMC,KAAK,GAAG,IAAI,CAACC,WAAW,CAACZ,KAAK,CAAC;EAErC,IAAI,IAAI,CAACI,IAAI,EAAE;IACb,IAAI,CAACS,OAAO,EAAE;EAChB,CAAC,MAAM;IACL,IAAI,CAACC,MAAM,EAAE;EACf;EACA,OAAOH,KAAK;AACd;AAUA,OAAO,SAASI,uBAAuBA,CAAiBC,WAAmB,EAAE;EAC3E,IAAI,CAACd,MAAM,EAAE;EACb,IAAIe,GAAW;EAEf,IAAI;IACFD,WAAW,GAAI,IAAGA,WAAY,GAAE;IAEhCC,GAAG,GAAGzC,KAAK,CAACwC,WAAW,CAAC;EAC1B,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZ,MAAMC,GAAG,GAAGD,GAAG,CAACC,GAAG;IACnB,IAAIA,GAAG,EAAE;MACPD,GAAG,CAACE,OAAO,IACT,uCAAuC,GACvCjD,gBAAgB,CAAC6C,WAAW,EAAE;QAC5BK,KAAK,EAAE;UACLC,IAAI,EAAEH,GAAG,CAACG,IAAI;UACdC,MAAM,EAAEJ,GAAG,CAACI,MAAM,GAAG;QACvB;MACF,CAAC,CAAC;MACJL,GAAG,CAACM,IAAI,GAAG,4BAA4B;IACzC;IACA,MAAMN,GAAG;EACX;EAEA,MAAMO,aAAa,GAAIR,GAAG,CAACS,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,CACvCC,UAAU;EACbxD,QAAQ,CAACyD,gBAAgB,CAACJ,aAAa,CAAC;EACxC,OAAO,IAAI,CAACK,WAAW,CAACL,aAAa,CAAC;AACxC;AAMA,OAAO,SAASK,WAAWA,CAEzBC,eAAgC,EACjB;EACf,IAAI,CAAC7B,MAAM,EAAE;EAEb,IAAI,IAAI,CAAC8B,OAAO,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;EAC1E;EAEA,IAAIjB,WAAmB,GACrBe,eAAe,YAAY1D,QAAQ,GAC/B0D,eAAe,CAAC3B,IAAI,GACpB2B,eAAe;EAErB,IAAI,CAACf,WAAW,EAAE;IAChB,MAAM,IAAIiB,KAAK,CACb,2EAA2E,CAC5E;EACH;EAEA,IAAI,IAAI,CAAC7B,IAAI,KAAKY,WAAW,EAAE;IAC7B,OAAO,CAAC,IAAI,CAAgB;EAC9B;EAEA,IAAI,IAAI,CAACzB,SAAS,EAAE,IAAI,CAACA,SAAS,CAACyB,WAAW,CAAC,EAAE;IAC/C,MAAM,IAAIiB,KAAK,CACb,oEAAoE,CACrE;EACH;EAEA,IAAIC,KAAK,CAACC,OAAO,CAACnB,WAAW,CAAC,EAAE;IAC9B,MAAM,IAAIiB,KAAK,CACb,yFAAyF,CAC1F;EACH;EAEA,IAAI,OAAOjB,WAAW,KAAK,QAAQ,EAAE;IACnC,MAAM,IAAIiB,KAAK,CACb,2FAA2F,CAC5F;EACH;EAEA,IAAIG,QAAQ,GAAG,EAAE;EAEjB,IAAI,IAAI,CAACC,UAAU,CAAC,WAAW,CAAC,IAAI/C,YAAY,CAAC0B,WAAW,CAAC,EAAE;IAC7D,IACE,CAAC,IAAI,CAACsB,sCAAsC,EAAE,IAC9C,CAAC,IAAI,CAACC,oCAAoC,CAACvB,WAAW,CAAC,IACvD,CAAC,IAAI,CAACwB,UAAU,CAACC,0BAA0B,EAAE,EAC7C;MAEAzB,WAAW,GAAG/B,mBAAmB,CAAC+B,WAAW,CAAC;MAC9CoB,QAAQ,GAAG,YAAY;IACzB;EACF;EAEA,IAAI,IAAI,CAACC,UAAU,CAAC,YAAY,CAAC,IAAI7C,WAAW,CAACwB,WAAW,CAAC,EAAE;IAC7D,IACE,CAAC,IAAI,CAACsB,sCAAsC,EAAE,IAC9C,CAAC,IAAI,CAACC,oCAAoC,CAACvB,WAAW,CAAC,EACvD;MAEA,OAAO,IAAI,CAAC0B,+BAA+B,CAAC,CAAC1B,WAAW,CAAC,CAAC;IAG5D;EACF;EAEA,MAAM2B,OAAO,GAAG,IAAI,CAACvC,IAAI;EACzB,IAAIuC,OAAO,EAAE;IACXtD,gBAAgB,CAAC2B,WAAW,EAAE2B,OAAO,CAAC;IACtClD,cAAc,CAACkD,OAAO,CAAC;EACzB;EAGA,IAAI,CAACC,YAAY,CAAC5B,WAAW,CAAC;EAC9B,IAAI,CAAC6B,IAAI,GAAG7B,WAAW,CAAC6B,IAAI;EAG5B,IAAI,CAACC,QAAQ,EAAE;EAGf,IAAI,CAACjC,OAAO,EAAE;EAEd,OAAO,CACLuB,QAAQ,GAAI,IAAI,CAAC9B,GAAG,CAAC8B,QAAQ,CAAC,GAAoB,IAAoB,CACvE;AACH;AAMA,OAAO,SAASQ,YAAYA,CAAiBxC,IAAY,EAAE;EAAA,IAAA2C,eAAA;EACzD,IAAI,CAAC,IAAI,CAACtC,SAAS,EAAE;IACnB,MAAM,IAAIuC,cAAc,CAAC,oBAAoB,CAAC;EAChD;EAEA,IAAI,IAAI,CAACC,MAAM,EAAE;IAEfrD,QAAQ,CAAC,IAAI,CAACW,MAAM,EAAE,IAAI,CAACG,GAAG,EAAE,CAACN,IAAI,CAAC,CAAC;EACzC,CAAC,MAAM;IACLR,QAAQ,CAAC,IAAI,CAACW,MAAM,EAAE,IAAI,CAACG,GAAG,EAAYN,IAAI,CAAC;EACjD;EAEA,IAAI,CAAC8C,KAAK,CAAE,gBAAe9C,IAAI,oBAAJA,IAAI,CAAEyC,IAAK,EAAC,CAAC;EACxC,CAAAE,eAAA,GAAAxE,SAAS,CAAC+B,GAAG,CAAC,IAAI,CAACC,MAAM,CAAC,qBAA1BwC,eAAA,CAA4BI,GAAG,CAAC/C,IAAI,EAAE,IAAI,CAAC,CAACI,MAAM,CAAC,IAAI,CAACJ,IAAI,CAAC;EAE7D,IAAI,CAACA,IAAI,GAEP,IAAI,CAACK,SAAS,CAAC,IAAI,CAACC,GAAG,CAAC,GAAGN,IAAI;AACnC;AAQA,OAAO,SAASsC,+BAA+BA,CAE7C1C,KAAyB,EACzB;EACA,IAAI,CAACE,MAAM,EAAE;EAEb,MAAMkD,yBAAyB,GAAGzD,oBAAoB,CAACK,KAAK,EAAE,IAAI,CAACqD,KAAK,CAAC;EAEzE,IAAID,yBAAyB,EAAE;IAC7B,OAAO,IAAI,CAACtB,WAAW,CAACsB,yBAAyB,CAAC,CAAC,CAAC,CAAC,CAAC9C,GAAG,CAAC,aAAa,CAAC;EAC1E;EAEA,MAAMgD,cAAc,GAAG,IAAI,CAACC,iBAAiB,EAAE;EAC/C,MAAMC,aAAa,GAAGF,cAAc,oBAAdA,cAAc,CAAEG,EAAE,CAAC,OAAO,CAAC;EACjD,MAAMC,iBAAiB,GAAGJ,cAAc,oBAAdA,cAAc,CAAEG,EAAE,CAAC,WAAW,CAAC;EAEzD,MAAMhD,SAAS,GAAG9B,uBAAuB,CAAC,EAAE,EAAEG,cAAc,CAACkB,KAAK,CAAC,CAAC;EAEpE,IAAI,CAAC8B,WAAW,CAAC/C,cAAc,CAAC0B,SAAS,EAAE,EAAE,CAAC,CAAC;EAU/C,MAAMkD,MAAM,GAAI,IAAI,CAAcrD,GAAG,CAAC,QAAQ,CAAC;EAC/CR,cAAc,CACZ6D,MAAM,CAACrD,GAAG,CAAC,MAAM,CAAC,EACjBsD,EAAgB,IAAK;IACpB,IAAI,CAACP,KAAK,CAACQ,IAAI,CAAC;MAAED;IAAG,CAAC,CAAC;EACzB,CAAC,EACD,KAAK,CACN;EAGD,MAAME,iBAAkC,GAAI,IAAI,CAC7CxD,GAAG,CAAC,QAAQ,CAAC,CACbyD,oBAAoB,EAAE;EACzB,KAAK,MAAMzF,IAAI,IAAIwF,iBAAiB,EAAE;IACpC,IAAI,CAACxF,IAAI,CAAC0F,qBAAqB,EAAE,EAAE;IAEnC,MAAMC,IAAI,GAAG3F,IAAI,CAAC4F,UAAU,CAAC5F,IAAI,IAAIA,IAAI,CAAC6F,MAAM,EAAE,CAAC;IACnD,IAAIF,IAAI,EAAE;MACR,IAAIG,GAAG,GAAGH,IAAI,CAACI,OAAO,CAAC,gCAAgC,CAAC;MAExD,IAAI,CAACD,GAAG,EAAE;QACRA,GAAG,GAAGT,MAAM,CAACN,KAAK,CAACiB,6BAA6B,CAAC,KAAK,CAAC;QACvDX,MAAM,CACHrD,GAAG,CAAC,MAAM,CAAC,CACXiE,aAAa,CAAC,MAAM,EAAE7E,eAAe,CAACV,SAAS,CAACoF,GAAG,CAAC,CAAC,CAAC;QACzDH,IAAI,CAACO,OAAO,CAAC,gCAAgC,EAAEJ,GAAG,CAAC;MACrD,CAAC,MAAM;QACLA,GAAG,GAAGlF,UAAU,CAACkF,GAAG,CAACK,IAAI,CAAC;MAC5B;MAEAnG,IAAI,CACDgC,GAAG,CAAC,YAAY,CAAC,CACjBwB,WAAW,CACVlD,oBAAoB,CAAC,GAAG,EAAEI,SAAS,CAACoF,GAAG,CAAC,EAAE9F,IAAI,CAAC8B,IAAI,CAACwB,UAAU,CAAC,CAChE;IACL,CAAC,MAAM;MACLtD,IAAI,CAACwD,WAAW,CAACpC,eAAe,CAACpB,IAAI,CAAC8B,IAAI,CAACwB,UAAU,CAAC,CAAC;IACzD;EACF;EAGA+B,MAAM,CAACe,yBAAyB,EAAE;EAGlC,MAAMC,SAAS,GAAGhB,MAAmD;EAGrE,MAAMiB,mBAAmB,GACvBpB,aAAa,IACbpF,QAAQ,CAACyG,OAAO,CACb,IAAI,CAACvE,GAAG,CAAC,aAAa,CAAC,CAAgCF,IAAI,EAC5D,iBAAiB,EACjB1B,cAAc,CACf;EACH,MAAMoG,mBAAmB,GACvBpB,iBAAiB,IACjBtF,QAAQ,CAACyG,OAAO,CACb,IAAI,CAACvE,GAAG,CAAC,aAAa,CAAC,CAAgCF,IAAI,EAC5D,iBAAiB,EACjB1B,cAAc,CACf;EACH,IAAIkG,mBAAmB,EAAE;IACvBD,SAAS,CAACxB,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC;IAE5B,IAAI,CAAC2B,mBAAmB,EAAE;MACxB,IAAI,CAAChD,WAAW,CAACjD,eAAe,CAAE,IAAI,CAAcuB,IAAI,CAAC,CAAC;IAC5D;EACF;EACA,IAAI0E,mBAAmB,EAAE;IACvBH,SAAS,CAACxB,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC;IAChC,IAAI,CAACrB,WAAW,CAACjC,eAAe,CAAE,IAAI,CAAcO,IAAI,EAAE,IAAI,CAAC,CAAC;EAClE;EAEA,OAAOuE,SAAS,CAACrE,GAAG,CAAC,WAAW,CAAC;AACnC;AAEA,OAAO,SAASyE,aAAaA,CAAiB/E,KAA6B,EAAE;EAC3E,IAAI,CAACE,MAAM,EAAE;EAEb,IAAIgC,KAAK,CAACC,OAAO,CAACnC,KAAK,CAAC,EAAE;IACxB,IAAIkC,KAAK,CAACC,OAAO,CAAC,IAAI,CAAC1B,SAAS,CAAC,EAAE;MACjCT,KAAK,GAAG,IAAI,CAACG,eAAe,CAACH,KAAK,CAAC;MACnC,MAAMW,KAAK,GAAG,IAAI,CAACqE,qBAAqB,CAAChF,KAAK,CAAC;MAC/C,IAAI,CAACc,MAAM,EAAE;MACb,OAAOH,KAAK;IACd,CAAC,MAAM;MACL,OAAO,IAAI,CAACZ,mBAAmB,CAACC,KAAK,CAAC;IACxC;EACF,CAAC,MAAM;IACL,OAAO,IAAI,CAAC8B,WAAW,CAAC9B,KAAK,CAAC;EAChC;AACF"}