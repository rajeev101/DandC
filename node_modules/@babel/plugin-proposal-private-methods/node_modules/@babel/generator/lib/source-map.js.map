{"version":3,"names":["GenMapping","maybeAddMapping","setSourceContent","allMappings","toEncodedMap","toDecodedMap","originalPositionFor","TraceMap","SourceMap","constructor","opts","code","_opts$sourceFileName","_map","_rawMappings","_sourceFileName","_lastGenLine","_lastSourceLine","_lastSourceColumn","_inputMap","map","sourceRoot","sourceFileName","replace","undefined","inputSourceMap","resolvedSources","length","i","_this$_inputMap$sourc","sourcesContent","Object","keys","get","getDecoded","getRawMappings","mark","generated","line","column","identifierName","identifierNamePos","filename","_originalMapping","originalMapping","name","originalIdentifierMapping","source","original"],"sources":["../src/source-map.ts"],"sourcesContent":["import {\n  GenMapping,\n  maybeAddMapping,\n  setSourceContent,\n  allMappings,\n  toEncodedMap,\n  toDecodedMap,\n} from \"@jridgewell/gen-mapping\";\n\nimport type {\n  EncodedSourceMap,\n  DecodedSourceMap,\n  Mapping,\n} from \"@jridgewell/gen-mapping\";\n\nimport {\n  type SourceMapInput,\n  originalPositionFor,\n  TraceMap,\n} from \"@jridgewell/trace-mapping\";\n\n/**\n * Build a sourcemap.\n */\n\nexport default class SourceMap {\n  private _map: GenMapping;\n  private _rawMappings: Mapping[] | undefined;\n  private _sourceFileName: string | undefined;\n\n  // Any real line is > 0, so init to 0 is fine.\n  private _lastGenLine = 0;\n  private _lastSourceLine = 0;\n\n  // Source columns can be 0, but we ony check in unison with sourceLine, which\n  // inits to an impossible value. So init to 0 is fine.\n  private _lastSourceColumn = 0;\n\n  public _inputMap: TraceMap;\n\n  constructor(\n    opts: {\n      sourceFileName?: string;\n      sourceRoot?: string;\n      inputSourceMap?: SourceMapInput;\n    },\n    code: string | { [sourceFileName: string]: string },\n  ) {\n    const map = (this._map = new GenMapping({ sourceRoot: opts.sourceRoot }));\n    this._sourceFileName = opts.sourceFileName?.replace(/\\\\/g, \"/\");\n    this._rawMappings = undefined;\n\n    if (opts.inputSourceMap) {\n      this._inputMap = new TraceMap(opts.inputSourceMap);\n      const resolvedSources = this._inputMap.resolvedSources;\n      if (resolvedSources.length) {\n        for (let i = 0; i < resolvedSources.length; i++) {\n          setSourceContent(\n            map,\n            resolvedSources[i],\n            this._inputMap.sourcesContent?.[i],\n          );\n        }\n      }\n    }\n\n    if (typeof code === \"string\" && !opts.inputSourceMap) {\n      setSourceContent(map, this._sourceFileName, code);\n    } else if (typeof code === \"object\") {\n      for (const sourceFileName of Object.keys(code)) {\n        setSourceContent(\n          map,\n          sourceFileName.replace(/\\\\/g, \"/\"),\n          code[sourceFileName],\n        );\n      }\n    }\n  }\n\n  /**\n   * Get the sourcemap.\n   */\n  get(): EncodedSourceMap {\n    return toEncodedMap(this._map);\n  }\n\n  getDecoded(): DecodedSourceMap {\n    return toDecodedMap(this._map);\n  }\n\n  getRawMappings(): Mapping[] {\n    return (this._rawMappings ||= allMappings(this._map));\n  }\n\n  /**\n   * Mark the current generated position with a source position. May also be passed null line/column\n   * values to insert a mapping to nothing.\n   */\n\n  mark(\n    generated: { line: number; column: number },\n    line: number,\n    column: number,\n    identifierName?: string | null,\n    identifierNamePos?: { line: number; column: number },\n    filename?: string | null,\n  ) {\n    this._rawMappings = undefined;\n\n    let originalMapping: {\n      source: string | null;\n      name?: string | null;\n      line: number | null;\n      column: number | null;\n    };\n\n    if (line != null) {\n      if (this._inputMap) {\n        // This is the lookup for this mark\n        originalMapping = originalPositionFor(this._inputMap, {\n          line,\n          column,\n        });\n\n        // If the we found a name, nothing else needs to be done\n        // Maybe we're marking a `(` and the input map already had a name attached there,\n        // or we're marking a `(` and the sourcemap spanned a `foo(`,\n        // or we're marking an identifier, etc.\n        if (!originalMapping.name && identifierNamePos) {\n          // We're trying to mark a `(` (as that's the only thing that provides\n          // an identifierNamePos currently), and we the AST had an identifier attached.\n          // Lookup it's original name.\n          const originalIdentifierMapping = originalPositionFor(\n            this._inputMap,\n            identifierNamePos,\n          );\n          if (originalIdentifierMapping.name) {\n            identifierName = originalIdentifierMapping.name;\n          }\n        }\n      } else {\n        originalMapping = {\n          source: filename?.replace(/\\\\/g, \"/\") || this._sourceFileName,\n          line: line,\n          column: column,\n        };\n      }\n    }\n\n    maybeAddMapping(this._map, {\n      name: identifierName,\n      generated,\n      source: originalMapping?.source,\n      original: originalMapping,\n    });\n  }\n}\n"],"mappings":"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"}