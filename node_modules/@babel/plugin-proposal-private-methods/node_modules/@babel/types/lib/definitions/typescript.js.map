{"version":3,"names":["defineAliasedType","arrayOfType","assertEach","assertNodeType","assertOneOf","assertValueType","chain","validate","validateArrayOfType","validateOptional","validateOptionalType","validateType","functionDeclarationCommon","classMethodOrDeclareMethodCommon","is","defineType","bool","tSFunctionTypeAnnotationCommon","returnType","optional","typeParameters","aliases","visitor","fields","accessibility","readonly","parameter","override","decorators","Object","assign","left","right","signatureDeclarationCommon","callConstructSignatureDeclaration","namedTypeElementCommon","key","computed","default","typeAnnotation","initializer","kind","static","parameters","tsKeywordTypes","type","fnOrCtrBase","abstract","typeName","builder","parameterName","asserts","exprName","members","elementType","elementTypes","label","unionOrIntersection","types","checkType","extendsType","trueType","falseType","typeParameter","operator","objectType","indexType","nameType","literal","unaryExpression","unaryOperator","validator","parent","node","argument","oneOfNodeTypes","expression","declare","id","extends","body","TSTypeExpression","const","global","qualifier","isExport","moduleReference","importKind","params","name","in","out","constraint"],"sources":["../../src/definitions/typescript.ts"],"sourcesContent":["import {\n  defineAliasedType,\n  arrayOfType,\n  assertEach,\n  assertNodeType,\n  assertOneOf,\n  assertValueType,\n  chain,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils\";\nimport {\n  functionDeclarationCommon,\n  classMethodOrDeclareMethodCommon,\n} from \"./core\";\nimport is from \"../validators/is\";\n\nconst defineType = defineAliasedType(\"TypeScript\");\n\nconst bool = assertValueType(\"boolean\");\n\nconst tSFunctionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TSTypeAnnotation\")\n      : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        assertNodeType(\"TSTypeAnnotation\", \"Noop\"),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TSTypeParameterDeclaration\")\n      : // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n        assertNodeType(\"TSTypeParameterDeclaration\", \"Noop\"),\n    optional: true,\n  },\n});\n\ndefineType(\"TSParameterProperty\", {\n  aliases: [\"LVal\"], // TODO: This isn't usable in general as an LVal. Should have a \"Parameter\" alias.\n  visitor: [\"parameter\"],\n  fields: {\n    accessibility: {\n      validate: assertOneOf(\"public\", \"private\", \"protected\"),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    parameter: {\n      validate: assertNodeType(\"Identifier\", \"AssignmentPattern\"),\n    },\n    override: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSDeclareFunction\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...tSFunctionTypeAnnotationCommon(),\n  },\n});\n\ndefineType(\"TSDeclareMethod\", {\n  visitor: [\"decorators\", \"key\", \"typeParameters\", \"params\", \"returnType\"],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...tSFunctionTypeAnnotationCommon(),\n  },\n});\n\ndefineType(\"TSQualifiedName\", {\n  aliases: [\"TSEntityName\"],\n  visitor: [\"left\", \"right\"],\n  fields: {\n    left: validateType(\"TSEntityName\"),\n    right: validateType(\"Identifier\"),\n  },\n});\n\nconst signatureDeclarationCommon = () => ({\n  typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n  [process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\"]: validateArrayOfType(\n    [\"Identifier\", \"RestElement\"],\n  ),\n  [process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\"]:\n    validateOptionalType(\"TSTypeAnnotation\"),\n});\n\nconst callConstructSignatureDeclaration = {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n  fields: signatureDeclarationCommon(),\n};\n\ndefineType(\"TSCallSignatureDeclaration\", callConstructSignatureDeclaration);\ndefineType(\n  \"TSConstructSignatureDeclaration\",\n  callConstructSignatureDeclaration,\n);\n\nconst namedTypeElementCommon = () => ({\n  key: validateType(\"Expression\"),\n  computed: { default: false },\n  optional: validateOptional(bool),\n});\n\ndefineType(\"TSPropertySignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"key\", \"typeAnnotation\", \"initializer\"],\n  fields: {\n    ...namedTypeElementCommon(),\n    readonly: validateOptional(bool),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    initializer: validateOptionalType(\"Expression\"),\n    kind: {\n      validate: assertOneOf(\"get\", \"set\"),\n    },\n  },\n});\n\ndefineType(\"TSMethodSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\n    \"key\",\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n  fields: {\n    ...signatureDeclarationCommon(),\n    ...namedTypeElementCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n    },\n  },\n});\n\ndefineType(\"TSIndexSignature\", {\n  aliases: [\"TSTypeElement\"],\n  visitor: [\"parameters\", \"typeAnnotation\"],\n  fields: {\n    readonly: validateOptional(bool),\n    static: validateOptional(bool),\n    parameters: validateArrayOfType(\"Identifier\"), // Length must be 1\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n  },\n});\n\nconst tsKeywordTypes = [\n  \"TSAnyKeyword\",\n  \"TSBooleanKeyword\",\n  \"TSBigIntKeyword\",\n  \"TSIntrinsicKeyword\",\n  \"TSNeverKeyword\",\n  \"TSNullKeyword\",\n  \"TSNumberKeyword\",\n  \"TSObjectKeyword\",\n  \"TSStringKeyword\",\n  \"TSSymbolKeyword\",\n  \"TSUndefinedKeyword\",\n  \"TSUnknownKeyword\",\n  \"TSVoidKeyword\",\n] as const;\n\nfor (const type of tsKeywordTypes) {\n  defineType(type, {\n    aliases: [\"TSType\", \"TSBaseType\"],\n    visitor: [],\n    fields: {},\n  });\n}\n\ndefineType(\"TSThisType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [],\n  fields: {},\n});\n\nconst fnOrCtrBase = {\n  aliases: [\"TSType\"],\n  visitor: [\n    \"typeParameters\",\n    process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\",\n    process.env.BABEL_8_BREAKING ? \"returnType\" : \"typeAnnotation\",\n  ],\n};\n\ndefineType(\"TSFunctionType\", {\n  ...fnOrCtrBase,\n  fields: signatureDeclarationCommon(),\n});\ndefineType(\"TSConstructorType\", {\n  ...fnOrCtrBase,\n  fields: {\n    ...signatureDeclarationCommon(),\n    abstract: validateOptional(bool),\n  },\n});\n\ndefineType(\"TSTypeReference\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeName\", \"typeParameters\"],\n  fields: {\n    typeName: validateType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypePredicate\", {\n  aliases: [\"TSType\"],\n  visitor: [\"parameterName\", \"typeAnnotation\"],\n  builder: [\"parameterName\", \"typeAnnotation\", \"asserts\"],\n  fields: {\n    parameterName: validateType([\"Identifier\", \"TSThisType\"]),\n    typeAnnotation: validateOptionalType(\"TSTypeAnnotation\"),\n    asserts: validateOptional(bool),\n  },\n});\n\ndefineType(\"TSTypeQuery\", {\n  aliases: [\"TSType\"],\n  visitor: [\"exprName\", \"typeParameters\"],\n  fields: {\n    exprName: validateType([\"TSEntityName\", \"TSImportType\"]),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSTypeLiteral\", {\n  aliases: [\"TSType\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSArrayType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementType\"],\n  fields: {\n    elementType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTupleType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"elementTypes\"],\n  fields: {\n    elementTypes: validateArrayOfType([\"TSType\", \"TSNamedTupleMember\"]),\n  },\n});\n\ndefineType(\"TSOptionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSRestType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSNamedTupleMember\", {\n  visitor: [\"label\", \"elementType\"],\n  builder: [\"label\", \"elementType\", \"optional\"],\n  fields: {\n    label: validateType(\"Identifier\"),\n    optional: {\n      validate: bool,\n      default: false,\n    },\n    elementType: validateType(\"TSType\"),\n  },\n});\n\nconst unionOrIntersection = {\n  aliases: [\"TSType\"],\n  visitor: [\"types\"],\n  fields: {\n    types: validateArrayOfType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSUnionType\", unionOrIntersection);\ndefineType(\"TSIntersectionType\", unionOrIntersection);\n\ndefineType(\"TSConditionalType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"checkType\", \"extendsType\", \"trueType\", \"falseType\"],\n  fields: {\n    checkType: validateType(\"TSType\"),\n    extendsType: validateType(\"TSType\"),\n    trueType: validateType(\"TSType\"),\n    falseType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInferType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\"],\n  fields: {\n    typeParameter: validateType(\"TSTypeParameter\"),\n  },\n});\n\ndefineType(\"TSParenthesizedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSTypeOperator\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    operator: validate(assertValueType(\"string\")),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSIndexedAccessType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"objectType\", \"indexType\"],\n  fields: {\n    objectType: validateType(\"TSType\"),\n    indexType: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSMappedType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"typeParameter\", \"typeAnnotation\", \"nameType\"],\n  fields: {\n    readonly: validateOptional(assertOneOf(true, false, \"+\", \"-\")),\n    typeParameter: validateType(\"TSTypeParameter\"),\n    optional: validateOptional(assertOneOf(true, false, \"+\", \"-\")),\n    typeAnnotation: validateOptionalType(\"TSType\"),\n    nameType: validateOptionalType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSLiteralType\", {\n  aliases: [\"TSType\", \"TSBaseType\"],\n  visitor: [\"literal\"],\n  fields: {\n    literal: {\n      validate: (function () {\n        const unaryExpression = assertNodeType(\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const unaryOperator = assertOneOf(\"-\");\n\n        const literal = assertNodeType(\n          \"NumericLiteral\",\n          \"StringLiteral\",\n          \"BooleanLiteral\",\n          \"BigIntLiteral\",\n          \"TemplateLiteral\",\n        );\n        function validator(parent: any, key: string, node: any) {\n          // type A = -1 | 1;\n          if (is(\"UnaryExpression\", node)) {\n            // check operator first\n            unaryOperator(node, \"operator\", node.operator);\n            unaryExpression(node, \"argument\", node.argument);\n          } else {\n            // type A = 'foo' | 'bar' | false | 1;\n            literal(parent, key, node);\n          }\n        }\n\n        validator.oneOfNodeTypes = [\n          \"NumericLiteral\",\n          \"StringLiteral\",\n          \"BooleanLiteral\",\n          \"BigIntLiteral\",\n          \"TemplateLiteral\",\n          \"UnaryExpression\",\n        ];\n\n        return validator;\n      })(),\n    },\n  },\n});\n\ndefineType(\"TSExpressionWithTypeArguments\", {\n  aliases: [\"TSType\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: validateType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSInterfaceDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    extends: validateOptional(arrayOfType(\"TSExpressionWithTypeArguments\")),\n    body: validateType(\"TSInterfaceBody\"),\n  },\n});\n\ndefineType(\"TSInterfaceBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"TSTypeElement\"),\n  },\n});\n\ndefineType(\"TSTypeAliasDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"typeParameters\", \"typeAnnotation\"],\n  fields: {\n    declare: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterDeclaration\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n});\n\ndefineType(\"TSInstantiationExpression\", {\n  aliases: [\"Expression\"],\n  visitor: [\"expression\", \"typeParameters\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\nconst TSTypeExpression = {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"expression\", \"typeAnnotation\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TSType\"),\n  },\n};\n\ndefineType(\"TSAsExpression\", TSTypeExpression);\ndefineType(\"TSSatisfiesExpression\", TSTypeExpression);\n\ndefineType(\"TSTypeAssertion\", {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"typeAnnotation\", \"expression\"],\n  fields: {\n    typeAnnotation: validateType(\"TSType\"),\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumDeclaration\", {\n  // \"Statement\" alias prevents a semicolon from appearing after it in an export declaration.\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"members\"],\n  fields: {\n    declare: validateOptional(bool),\n    const: validateOptional(bool),\n    id: validateType(\"Identifier\"),\n    members: validateArrayOfType(\"TSEnumMember\"),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSEnumMember\", {\n  visitor: [\"id\", \"initializer\"],\n  fields: {\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    initializer: validateOptionalType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSModuleDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    declare: validateOptional(bool),\n    global: validateOptional(bool),\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    body: validateType([\"TSModuleBlock\", \"TSModuleDeclaration\"]),\n  },\n});\n\ndefineType(\"TSModuleBlock\", {\n  aliases: [\"Scopable\", \"Block\", \"BlockParent\", \"FunctionParent\"],\n  visitor: [\"body\"],\n  fields: {\n    body: validateArrayOfType(\"Statement\"),\n  },\n});\n\ndefineType(\"TSImportType\", {\n  aliases: [\"TSType\"],\n  visitor: [\"argument\", \"qualifier\", \"typeParameters\"],\n  fields: {\n    argument: validateType(\"StringLiteral\"),\n    qualifier: validateOptionalType(\"TSEntityName\"),\n    typeParameters: validateOptionalType(\"TSTypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"TSImportEqualsDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\", \"moduleReference\"],\n  fields: {\n    isExport: validate(bool),\n    id: validateType(\"Identifier\"),\n    moduleReference: validateType([\n      \"TSEntityName\",\n      \"TSExternalModuleReference\",\n    ]),\n    importKind: {\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TSExternalModuleReference\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"TSNonNullExpression\", {\n  aliases: [\"Expression\", \"LVal\", \"PatternLike\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSExportAssignment\", {\n  aliases: [\"Statement\"],\n  visitor: [\"expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n  },\n});\n\ndefineType(\"TSNamespaceExportDeclaration\", {\n  aliases: [\"Statement\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"TSTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: {\n      validate: assertNodeType(\"TSType\"),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSType\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TSTypeParameter\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"TSTypeParameter\", {\n  builder: [\"constraint\", \"default\", \"name\"],\n  visitor: [\"constraint\", \"default\"],\n  fields: {\n    name: {\n      validate: !process.env.BABEL_8_BREAKING\n        ? assertValueType(\"string\")\n        : assertNodeType(\"Identifier\"),\n    },\n    in: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    out: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    const: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    constraint: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n    default: {\n      validate: assertNodeType(\"TSType\"),\n      optional: true,\n    },\n  },\n});\n"],"mappings":"AAAA,SACEA,iBAAiB,EACjBC,WAAW,EACXC,UAAU,EACVC,cAAc,EACdC,WAAW,EACXC,eAAe,EACfC,KAAK,EACLC,QAAQ,EACRC,mBAAmB,EACnBC,gBAAgB,EAChBC,oBAAoB,EACpBC,YAAY,QACP,YAAS;AAChB,SACEC,yBAAyB,EACzBC,gCAAgC,QAC3B,WAAQ;AACf,OAAOC,EAAE,MAAM,qBAAkB;AAEjC,MAAMC,UAAU,GAAGf,iBAAiB,CAAC,YAAY,CAAC;AAElD,MAAMgB,IAAI,GAAGX,eAAe,CAAC,SAAS,CAAC;AAEvC,MAAMY,8BAA8B,GAAGA,CAAA,MAAO;EAC5CC,UAAU,EAAE;IACVX,QAAQ,EAGJJ,cAAc,CAAC,kBAAkB,EAAE,MAAM,CAAC;IAC9CgB,QAAQ,EAAE;EACZ,CAAC;EACDC,cAAc,EAAE;IACdb,QAAQ,EAGJJ,cAAc,CAAC,4BAA4B,EAAE,MAAM,CAAC;IACxDgB,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;AAEFJ,UAAU,CAAC,qBAAqB,EAAE;EAChCM,OAAO,EAAE,CAAC,MAAM,CAAC;EACjBC,OAAO,EAAE,CAAC,WAAW,CAAC;EACtBC,MAAM,EAAE;IACNC,aAAa,EAAE;MACbjB,QAAQ,EAAEH,WAAW,CAAC,QAAQ,EAAE,SAAS,EAAE,WAAW,CAAC;MACvDe,QAAQ,EAAE;IACZ,CAAC;IACDM,QAAQ,EAAE;MACRlB,QAAQ,EAAEF,eAAe,CAAC,SAAS,CAAC;MACpCc,QAAQ,EAAE;IACZ,CAAC;IACDO,SAAS,EAAE;MACTnB,QAAQ,EAAEJ,cAAc,CAAC,YAAY,EAAE,mBAAmB;IAC5D,CAAC;IACDwB,QAAQ,EAAE;MACRpB,QAAQ,EAAEF,eAAe,CAAC,SAAS,CAAC;MACpCc,QAAQ,EAAE;IACZ,CAAC;IACDS,UAAU,EAAE;MACVrB,QAAQ,EAAED,KAAK,CACbD,eAAe,CAAC,OAAO,CAAC,EACxBH,UAAU,CAACC,cAAc,CAAC,WAAW,CAAC,CAAC,CACxC;MACDgB,QAAQ,EAAE;IACZ;EACF;AACF,CAAC,CAAC;AAEFJ,UAAU,CAAC,mBAAmB,EAAE;EAC9BM,OAAO,EAAE,CAAC,WAAW,EAAE,aAAa,CAAC;EACrCC,OAAO,EAAE,CAAC,IAAI,EAAE,gBAAgB,EAAE,QAAQ,EAAE,YAAY,CAAC;EACzDC,MAAM,EAAAM,MAAA,CAAAC,MAAA,KACDlB,yBAAyB,EAAE,EAC3BK,8BAA8B,EAAE;AAEvC,CAAC,CAAC;AAEFF,UAAU,CAAC,iBAAiB,EAAE;EAC5BO,OAAO,EAAE,CAAC,YAAY,EAAE,KAAK,EAAE,gBAAgB,EAAE,QAAQ,EAAE,YAAY,CAAC;EACxEC,MAAM,EAAAM,MAAA,CAAAC,MAAA,KACDjB,gCAAgC,EAAE,EAClCI,8BAA8B,EAAE;AAEvC,CAAC,CAAC;AAEFF,UAAU,CAAC,iBAAiB,EAAE;EAC5BM,OAAO,EAAE,CAAC,cAAc,CAAC;EACzBC,OAAO,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC;EAC1BC,MAAM,EAAE;IACNQ,IAAI,EAAEpB,YAAY,CAAC,cAAc,CAAC;IAClCqB,KAAK,EAAErB,YAAY,CAAC,YAAY;EAClC;AACF,CAAC,CAAC;AAEF,MAAMsB,0BAA0B,GAAGA,CAAA,MAAO;EACxCb,cAAc,EAAEV,oBAAoB,CAAC,4BAA4B,CAAC;EAClE,CAA2C,YAAY,GAAGF,mBAAmB,CAC3E,CAAC,YAAY,EAAE,aAAa,CAAC,CAC9B;EACD,CAA+C,gBAAgB,GAC7DE,oBAAoB,CAAC,kBAAkB;AAC3C,CAAC,CAAC;AAEF,MAAMwB,iCAAiC,GAAG;EACxCb,OAAO,EAAE,CAAC,eAAe,CAAC;EAC1BC,OAAO,EAAE,CACP,gBAAgB,EAC0B,YAAY,EACR,gBAAgB,CAC/D;EACDC,MAAM,EAAEU,0BAA0B;AACpC,CAAC;AAEDlB,UAAU,CAAC,4BAA4B,EAAEmB,iCAAiC,CAAC;AAC3EnB,UAAU,CACR,iCAAiC,EACjCmB,iCAAiC,CAClC;AAED,MAAMC,sBAAsB,GAAGA,CAAA,MAAO;EACpCC,GAAG,EAAEzB,YAAY,CAAC,YAAY,CAAC;EAC/B0B,QAAQ,EAAE;IAAEC,OAAO,EAAE;EAAM,CAAC;EAC5BnB,QAAQ,EAAEV,gBAAgB,CAACO,IAAI;AACjC,CAAC,CAAC;AAEFD,UAAU,CAAC,qBAAqB,EAAE;EAChCM,OAAO,EAAE,CAAC,eAAe,CAAC;EAC1BC,OAAO,EAAE,CAAC,KAAK,EAAE,gBAAgB,EAAE,aAAa,CAAC;EACjDC,MAAM,EAAAM,MAAA,CAAAC,MAAA,KACDK,sBAAsB,EAAE;IAC3BV,QAAQ,EAAEhB,gBAAgB,CAACO,IAAI,CAAC;IAChCuB,cAAc,EAAE7B,oBAAoB,CAAC,kBAAkB,CAAC;IACxD8B,WAAW,EAAE9B,oBAAoB,CAAC,YAAY,CAAC;IAC/C+B,IAAI,EAAE;MACJlC,QAAQ,EAAEH,WAAW,CAAC,KAAK,EAAE,KAAK;IACpC;EAAC;AAEL,CAAC,CAAC;AAEFW,UAAU,CAAC,mBAAmB,EAAE;EAC9BM,OAAO,EAAE,CAAC,eAAe,CAAC;EAC1BC,OAAO,EAAE,CACP,KAAK,EACL,gBAAgB,EAC0B,YAAY,EACR,gBAAgB,CAC/D;EACDC,MAAM,EAAAM,MAAA,CAAAC,MAAA,KACDG,0BAA0B,EAAE,EAC5BE,sBAAsB,EAAE;IAC3BM,IAAI,EAAE;MACJlC,QAAQ,EAAEH,WAAW,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK;IAC9C;EAAC;AAEL,CAAC,CAAC;AAEFW,UAAU,CAAC,kBAAkB,EAAE;EAC7BM,OAAO,EAAE,CAAC,eAAe,CAAC;EAC1BC,OAAO,EAAE,CAAC,YAAY,EAAE,gBAAgB,CAAC;EACzCC,MAAM,EAAE;IACNE,QAAQ,EAAEhB,gBAAgB,CAACO,IAAI,CAAC;IAChC0B,MAAM,EAAEjC,gBAAgB,CAACO,IAAI,CAAC;IAC9B2B,UAAU,EAAEnC,mBAAmB,CAAC,YAAY,CAAC;IAC7C+B,cAAc,EAAE7B,oBAAoB,CAAC,kBAAkB;EACzD;AACF,CAAC,CAAC;AAEF,MAAMkC,cAAc,GAAG,CACrB,cAAc,EACd,kBAAkB,EAClB,iBAAiB,EACjB,oBAAoB,EACpB,gBAAgB,EAChB,eAAe,EACf,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB,iBAAiB,EACjB,oBAAoB,EACpB,kBAAkB,EAClB,eAAe,CACP;AAEV,KAAK,MAAMC,IAAI,IAAID,cAAc,EAAE;EACjC7B,UAAU,CAAC8B,IAAI,EAAE;IACfxB,OAAO,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC;IACjCC,OAAO,EAAE,EAAE;IACXC,MAAM,EAAE,CAAC;EACX,CAAC,CAAC;AACJ;AAEAR,UAAU,CAAC,YAAY,EAAE;EACvBM,OAAO,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC;EACjCC,OAAO,EAAE,EAAE;EACXC,MAAM,EAAE,CAAC;AACX,CAAC,CAAC;AAEF,MAAMuB,WAAW,GAAG;EAClBzB,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CACP,gBAAgB,EAC0B,YAAY,EACR,gBAAgB;AAElE,CAAC;AAEDP,UAAU,CAAC,gBAAgB,EAAAc,MAAA,CAAAC,MAAA,KACtBgB,WAAW;EACdvB,MAAM,EAAEU,0BAA0B;AAAE,GACpC;AACFlB,UAAU,CAAC,mBAAmB,EAAAc,MAAA,CAAAC,MAAA,KACzBgB,WAAW;EACdvB,MAAM,EAAAM,MAAA,CAAAC,MAAA,KACDG,0BAA0B,EAAE;IAC/Bc,QAAQ,EAAEtC,gBAAgB,CAACO,IAAI;EAAC;AACjC,GACD;AAEFD,UAAU,CAAC,iBAAiB,EAAE;EAC5BM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,UAAU,EAAE,gBAAgB,CAAC;EACvCC,MAAM,EAAE;IACNyB,QAAQ,EAAErC,YAAY,CAAC,cAAc,CAAC;IACtCS,cAAc,EAAEV,oBAAoB,CAAC,8BAA8B;EACrE;AACF,CAAC,CAAC;AAEFK,UAAU,CAAC,iBAAiB,EAAE;EAC5BM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,eAAe,EAAE,gBAAgB,CAAC;EAC5C2B,OAAO,EAAE,CAAC,eAAe,EAAE,gBAAgB,EAAE,SAAS,CAAC;EACvD1B,MAAM,EAAE;IACN2B,aAAa,EAAEvC,YAAY,CAAC,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IACzD4B,cAAc,EAAE7B,oBAAoB,CAAC,kBAAkB,CAAC;IACxDyC,OAAO,EAAE1C,gBAAgB,CAACO,IAAI;EAChC;AACF,CAAC,CAAC;AAEFD,UAAU,CAAC,aAAa,EAAE;EACxBM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,UAAU,EAAE,gBAAgB,CAAC;EACvCC,MAAM,EAAE;IACN6B,QAAQ,EAAEzC,YAAY,CAAC,CAAC,cAAc,EAAE,cAAc,CAAC,CAAC;IACxDS,cAAc,EAAEV,oBAAoB,CAAC,8BAA8B;EACrE;AACF,CAAC,CAAC;AAEFK,UAAU,CAAC,eAAe,EAAE;EAC1BM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,SAAS,CAAC;EACpBC,MAAM,EAAE;IACN8B,OAAO,EAAE7C,mBAAmB,CAAC,eAAe;EAC9C;AACF,CAAC,CAAC;AAEFO,UAAU,CAAC,aAAa,EAAE;EACxBM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,aAAa,CAAC;EACxBC,MAAM,EAAE;IACN+B,WAAW,EAAE3C,YAAY,CAAC,QAAQ;EACpC;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,aAAa,EAAE;EACxBM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,cAAc,CAAC;EACzBC,MAAM,EAAE;IACNgC,YAAY,EAAE/C,mBAAmB,CAAC,CAAC,QAAQ,EAAE,oBAAoB,CAAC;EACpE;AACF,CAAC,CAAC;AAEFO,UAAU,CAAC,gBAAgB,EAAE;EAC3BM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,gBAAgB,CAAC;EAC3BC,MAAM,EAAE;IACNgB,cAAc,EAAE5B,YAAY,CAAC,QAAQ;EACvC;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,YAAY,EAAE;EACvBM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,gBAAgB,CAAC;EAC3BC,MAAM,EAAE;IACNgB,cAAc,EAAE5B,YAAY,CAAC,QAAQ;EACvC;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,oBAAoB,EAAE;EAC/BO,OAAO,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC;EACjC2B,OAAO,EAAE,CAAC,OAAO,EAAE,aAAa,EAAE,UAAU,CAAC;EAC7C1B,MAAM,EAAE;IACNiC,KAAK,EAAE7C,YAAY,CAAC,YAAY,CAAC;IACjCQ,QAAQ,EAAE;MACRZ,QAAQ,EAAES,IAAI;MACdsB,OAAO,EAAE;IACX,CAAC;IACDgB,WAAW,EAAE3C,YAAY,CAAC,QAAQ;EACpC;AACF,CAAC,CAAC;AAEF,MAAM8C,mBAAmB,GAAG;EAC1BpC,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,OAAO,CAAC;EAClBC,MAAM,EAAE;IACNmC,KAAK,EAAElD,mBAAmB,CAAC,QAAQ;EACrC;AACF,CAAC;AAEDO,UAAU,CAAC,aAAa,EAAE0C,mBAAmB,CAAC;AAC9C1C,UAAU,CAAC,oBAAoB,EAAE0C,mBAAmB,CAAC;AAErD1C,UAAU,CAAC,mBAAmB,EAAE;EAC9BM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,WAAW,EAAE,aAAa,EAAE,UAAU,EAAE,WAAW,CAAC;EAC9DC,MAAM,EAAE;IACNoC,SAAS,EAAEhD,YAAY,CAAC,QAAQ,CAAC;IACjCiD,WAAW,EAAEjD,YAAY,CAAC,QAAQ,CAAC;IACnCkD,QAAQ,EAAElD,YAAY,CAAC,QAAQ,CAAC;IAChCmD,SAAS,EAAEnD,YAAY,CAAC,QAAQ;EAClC;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,aAAa,EAAE;EACxBM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,eAAe,CAAC;EAC1BC,MAAM,EAAE;IACNwC,aAAa,EAAEpD,YAAY,CAAC,iBAAiB;EAC/C;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,qBAAqB,EAAE;EAChCM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,gBAAgB,CAAC;EAC3BC,MAAM,EAAE;IACNgB,cAAc,EAAE5B,YAAY,CAAC,QAAQ;EACvC;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,gBAAgB,EAAE;EAC3BM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,gBAAgB,CAAC;EAC3BC,MAAM,EAAE;IACNyC,QAAQ,EAAEzD,QAAQ,CAACF,eAAe,CAAC,QAAQ,CAAC,CAAC;IAC7CkC,cAAc,EAAE5B,YAAY,CAAC,QAAQ;EACvC;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,qBAAqB,EAAE;EAChCM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,YAAY,EAAE,WAAW,CAAC;EACpCC,MAAM,EAAE;IACN0C,UAAU,EAAEtD,YAAY,CAAC,QAAQ,CAAC;IAClCuD,SAAS,EAAEvD,YAAY,CAAC,QAAQ;EAClC;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,cAAc,EAAE;EACzBM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,eAAe,EAAE,gBAAgB,EAAE,UAAU,CAAC;EACxDC,MAAM,EAAE;IACNE,QAAQ,EAAEhB,gBAAgB,CAACL,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC9D2D,aAAa,EAAEpD,YAAY,CAAC,iBAAiB,CAAC;IAC9CQ,QAAQ,EAAEV,gBAAgB,CAACL,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC9DmC,cAAc,EAAE7B,oBAAoB,CAAC,QAAQ,CAAC;IAC9CyD,QAAQ,EAAEzD,oBAAoB,CAAC,QAAQ;EACzC;AACF,CAAC,CAAC;AAEFK,UAAU,CAAC,eAAe,EAAE;EAC1BM,OAAO,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC;EACjCC,OAAO,EAAE,CAAC,SAAS,CAAC;EACpBC,MAAM,EAAE;IACN6C,OAAO,EAAE;MACP7D,QAAQ,EAAG,YAAY;QACrB,MAAM8D,eAAe,GAAGlE,cAAc,CACpC,gBAAgB,EAChB,eAAe,CAChB;QACD,MAAMmE,aAAa,GAAGlE,WAAW,CAAC,GAAG,CAAC;QAEtC,MAAMgE,OAAO,GAAGjE,cAAc,CAC5B,gBAAgB,EAChB,eAAe,EACf,gBAAgB,EAChB,eAAe,EACf,iBAAiB,CAClB;QACD,SAASoE,SAASA,CAACC,MAAW,EAAEpC,GAAW,EAAEqC,IAAS,EAAE;UAEtD,IAAI3D,EAAE,CAAC,iBAAiB,EAAE2D,IAAI,CAAC,EAAE;YAE/BH,aAAa,CAACG,IAAI,EAAE,UAAU,EAAEA,IAAI,CAACT,QAAQ,CAAC;YAC9CK,eAAe,CAACI,IAAI,EAAE,UAAU,EAAEA,IAAI,CAACC,QAAQ,CAAC;UAClD,CAAC,MAAM;YAELN,OAAO,CAACI,MAAM,EAAEpC,GAAG,EAAEqC,IAAI,CAAC;UAC5B;QACF;QAEAF,SAAS,CAACI,cAAc,GAAG,CACzB,gBAAgB,EAChB,eAAe,EACf,gBAAgB,EAChB,eAAe,EACf,iBAAiB,EACjB,iBAAiB,CAClB;QAED,OAAOJ,SAAS;MAClB,CAAC;IACH;EACF;AACF,CAAC,CAAC;AAEFxD,UAAU,CAAC,+BAA+B,EAAE;EAC1CM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,YAAY,EAAE,gBAAgB,CAAC;EACzCC,MAAM,EAAE;IACNqD,UAAU,EAAEjE,YAAY,CAAC,cAAc,CAAC;IACxCS,cAAc,EAAEV,oBAAoB,CAAC,8BAA8B;EACrE;AACF,CAAC,CAAC;AAEFK,UAAU,CAAC,wBAAwB,EAAE;EAEnCM,OAAO,EAAE,CAAC,WAAW,EAAE,aAAa,CAAC;EACrCC,OAAO,EAAE,CAAC,IAAI,EAAE,gBAAgB,EAAE,SAAS,EAAE,MAAM,CAAC;EACpDC,MAAM,EAAE;IACNsD,OAAO,EAAEpE,gBAAgB,CAACO,IAAI,CAAC;IAC/B8D,EAAE,EAAEnE,YAAY,CAAC,YAAY,CAAC;IAC9BS,cAAc,EAAEV,oBAAoB,CAAC,4BAA4B,CAAC;IAClEqE,OAAO,EAAEtE,gBAAgB,CAACR,WAAW,CAAC,+BAA+B,CAAC,CAAC;IACvE+E,IAAI,EAAErE,YAAY,CAAC,iBAAiB;EACtC;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,iBAAiB,EAAE;EAC5BO,OAAO,EAAE,CAAC,MAAM,CAAC;EACjBC,MAAM,EAAE;IACNyD,IAAI,EAAExE,mBAAmB,CAAC,eAAe;EAC3C;AACF,CAAC,CAAC;AAEFO,UAAU,CAAC,wBAAwB,EAAE;EACnCM,OAAO,EAAE,CAAC,WAAW,EAAE,aAAa,CAAC;EACrCC,OAAO,EAAE,CAAC,IAAI,EAAE,gBAAgB,EAAE,gBAAgB,CAAC;EACnDC,MAAM,EAAE;IACNsD,OAAO,EAAEpE,gBAAgB,CAACO,IAAI,CAAC;IAC/B8D,EAAE,EAAEnE,YAAY,CAAC,YAAY,CAAC;IAC9BS,cAAc,EAAEV,oBAAoB,CAAC,4BAA4B,CAAC;IAClE6B,cAAc,EAAE5B,YAAY,CAAC,QAAQ;EACvC;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,2BAA2B,EAAE;EACtCM,OAAO,EAAE,CAAC,YAAY,CAAC;EACvBC,OAAO,EAAE,CAAC,YAAY,EAAE,gBAAgB,CAAC;EACzCC,MAAM,EAAE;IACNqD,UAAU,EAAEjE,YAAY,CAAC,YAAY,CAAC;IACtCS,cAAc,EAAEV,oBAAoB,CAAC,8BAA8B;EACrE;AACF,CAAC,CAAC;AAEF,MAAMuE,gBAAgB,GAAG;EACvB5D,OAAO,EAAE,CAAC,YAAY,EAAE,MAAM,EAAE,aAAa,CAAC;EAC9CC,OAAO,EAAE,CAAC,YAAY,EAAE,gBAAgB,CAAC;EACzCC,MAAM,EAAE;IACNqD,UAAU,EAAEjE,YAAY,CAAC,YAAY,CAAC;IACtC4B,cAAc,EAAE5B,YAAY,CAAC,QAAQ;EACvC;AACF,CAAC;AAEDI,UAAU,CAAC,gBAAgB,EAAEkE,gBAAgB,CAAC;AAC9ClE,UAAU,CAAC,uBAAuB,EAAEkE,gBAAgB,CAAC;AAErDlE,UAAU,CAAC,iBAAiB,EAAE;EAC5BM,OAAO,EAAE,CAAC,YAAY,EAAE,MAAM,EAAE,aAAa,CAAC;EAC9CC,OAAO,EAAE,CAAC,gBAAgB,EAAE,YAAY,CAAC;EACzCC,MAAM,EAAE;IACNgB,cAAc,EAAE5B,YAAY,CAAC,QAAQ,CAAC;IACtCiE,UAAU,EAAEjE,YAAY,CAAC,YAAY;EACvC;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,mBAAmB,EAAE;EAE9BM,OAAO,EAAE,CAAC,WAAW,EAAE,aAAa,CAAC;EACrCC,OAAO,EAAE,CAAC,IAAI,EAAE,SAAS,CAAC;EAC1BC,MAAM,EAAE;IACNsD,OAAO,EAAEpE,gBAAgB,CAACO,IAAI,CAAC;IAC/BkE,KAAK,EAAEzE,gBAAgB,CAACO,IAAI,CAAC;IAC7B8D,EAAE,EAAEnE,YAAY,CAAC,YAAY,CAAC;IAC9B0C,OAAO,EAAE7C,mBAAmB,CAAC,cAAc,CAAC;IAC5CgC,WAAW,EAAE9B,oBAAoB,CAAC,YAAY;EAChD;AACF,CAAC,CAAC;AAEFK,UAAU,CAAC,cAAc,EAAE;EACzBO,OAAO,EAAE,CAAC,IAAI,EAAE,aAAa,CAAC;EAC9BC,MAAM,EAAE;IACNuD,EAAE,EAAEnE,YAAY,CAAC,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;IACjD6B,WAAW,EAAE9B,oBAAoB,CAAC,YAAY;EAChD;AACF,CAAC,CAAC;AAEFK,UAAU,CAAC,qBAAqB,EAAE;EAChCM,OAAO,EAAE,CAAC,WAAW,EAAE,aAAa,CAAC;EACrCC,OAAO,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC;EACvBC,MAAM,EAAE;IACNsD,OAAO,EAAEpE,gBAAgB,CAACO,IAAI,CAAC;IAC/BmE,MAAM,EAAE1E,gBAAgB,CAACO,IAAI,CAAC;IAC9B8D,EAAE,EAAEnE,YAAY,CAAC,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC;IACjDqE,IAAI,EAAErE,YAAY,CAAC,CAAC,eAAe,EAAE,qBAAqB,CAAC;EAC7D;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,eAAe,EAAE;EAC1BM,OAAO,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,aAAa,EAAE,gBAAgB,CAAC;EAC/DC,OAAO,EAAE,CAAC,MAAM,CAAC;EACjBC,MAAM,EAAE;IACNyD,IAAI,EAAExE,mBAAmB,CAAC,WAAW;EACvC;AACF,CAAC,CAAC;AAEFO,UAAU,CAAC,cAAc,EAAE;EACzBM,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,OAAO,EAAE,CAAC,UAAU,EAAE,WAAW,EAAE,gBAAgB,CAAC;EACpDC,MAAM,EAAE;IACNmD,QAAQ,EAAE/D,YAAY,CAAC,eAAe,CAAC;IACvCyE,SAAS,EAAE1E,oBAAoB,CAAC,cAAc,CAAC;IAC/CU,cAAc,EAAEV,oBAAoB,CAAC,8BAA8B;EACrE;AACF,CAAC,CAAC;AAEFK,UAAU,CAAC,2BAA2B,EAAE;EACtCM,OAAO,EAAE,CAAC,WAAW,CAAC;EACtBC,OAAO,EAAE,CAAC,IAAI,EAAE,iBAAiB,CAAC;EAClCC,MAAM,EAAE;IACN8D,QAAQ,EAAE9E,QAAQ,CAACS,IAAI,CAAC;IACxB8D,EAAE,EAAEnE,YAAY,CAAC,YAAY,CAAC;IAC9B2E,eAAe,EAAE3E,YAAY,CAAC,CAC5B,cAAc,EACd,2BAA2B,CAC5B,CAAC;IACF4E,UAAU,EAAE;MACVhF,QAAQ,EAAEH,WAAW,CAAC,MAAM,EAAE,OAAO,CAAC;MACtCe,QAAQ,EAAE;IACZ;EACF;AACF,CAAC,CAAC;AAEFJ,UAAU,CAAC,2BAA2B,EAAE;EACtCO,OAAO,EAAE,CAAC,YAAY,CAAC;EACvBC,MAAM,EAAE;IACNqD,UAAU,EAAEjE,YAAY,CAAC,eAAe;EAC1C;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,qBAAqB,EAAE;EAChCM,OAAO,EAAE,CAAC,YAAY,EAAE,MAAM,EAAE,aAAa,CAAC;EAC9CC,OAAO,EAAE,CAAC,YAAY,CAAC;EACvBC,MAAM,EAAE;IACNqD,UAAU,EAAEjE,YAAY,CAAC,YAAY;EACvC;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,oBAAoB,EAAE;EAC/BM,OAAO,EAAE,CAAC,WAAW,CAAC;EACtBC,OAAO,EAAE,CAAC,YAAY,CAAC;EACvBC,MAAM,EAAE;IACNqD,UAAU,EAAEjE,YAAY,CAAC,YAAY;EACvC;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,8BAA8B,EAAE;EACzCM,OAAO,EAAE,CAAC,WAAW,CAAC;EACtBC,OAAO,EAAE,CAAC,IAAI,CAAC;EACfC,MAAM,EAAE;IACNuD,EAAE,EAAEnE,YAAY,CAAC,YAAY;EAC/B;AACF,CAAC,CAAC;AAEFI,UAAU,CAAC,kBAAkB,EAAE;EAC7BO,OAAO,EAAE,CAAC,gBAAgB,CAAC;EAC3BC,MAAM,EAAE;IACNgB,cAAc,EAAE;MACdhC,QAAQ,EAAEJ,cAAc,CAAC,QAAQ;IACnC;EACF;AACF,CAAC,CAAC;AAEFY,UAAU,CAAC,8BAA8B,EAAE;EACzCO,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,MAAM,EAAE;IACNiE,MAAM,EAAE;MACNjF,QAAQ,EAAED,KAAK,CACbD,eAAe,CAAC,OAAO,CAAC,EACxBH,UAAU,CAACC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAExC;EACF;AACF,CAAC,CAAC;AAEFY,UAAU,CAAC,4BAA4B,EAAE;EACvCO,OAAO,EAAE,CAAC,QAAQ,CAAC;EACnBC,MAAM,EAAE;IACNiE,MAAM,EAAE;MACNjF,QAAQ,EAAED,KAAK,CACbD,eAAe,CAAC,OAAO,CAAC,EACxBH,UAAU,CAACC,cAAc,CAAC,iBAAiB,CAAC,CAAC;IAEjD;EACF;AACF,CAAC,CAAC;AAEFY,UAAU,CAAC,iBAAiB,EAAE;EAC5BkC,OAAO,EAAE,CAAC,YAAY,EAAE,SAAS,EAAE,MAAM,CAAC;EAC1C3B,OAAO,EAAE,CAAC,YAAY,EAAE,SAAS,CAAC;EAClCC,MAAM,EAAE;IACNkE,IAAI,EAAE;MACJlF,QAAQ,EACJF,eAAe,CAAC,QAAQ;IAE9B,CAAC;IACDqF,EAAE,EAAE;MACFnF,QAAQ,EAAEF,eAAe,CAAC,SAAS,CAAC;MACpCc,QAAQ,EAAE;IACZ,CAAC;IACDwE,GAAG,EAAE;MACHpF,QAAQ,EAAEF,eAAe,CAAC,SAAS,CAAC;MACpCc,QAAQ,EAAE;IACZ,CAAC;IACD+D,KAAK,EAAE;MACL3E,QAAQ,EAAEF,eAAe,CAAC,SAAS,CAAC;MACpCc,QAAQ,EAAE;IACZ,CAAC;IACDyE,UAAU,EAAE;MACVrF,QAAQ,EAAEJ,cAAc,CAAC,QAAQ,CAAC;MAClCgB,QAAQ,EAAE;IACZ,CAAC;IACDmB,OAAO,EAAE;MACP/B,QAAQ,EAAEJ,cAAc,CAAC,QAAQ,CAAC;MAClCgB,QAAQ,EAAE;IACZ;EACF;AACF,CAAC,CAAC"}