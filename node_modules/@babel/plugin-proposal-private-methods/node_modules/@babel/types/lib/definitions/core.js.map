{"version":3,"names":["is","isValidIdentifier","isKeyword","isReservedWord","readStringContents","BINARY_OPERATORS","LOGICAL_OPERATORS","ASSIGNMENT_OPERATORS","UNARY_OPERATORS","UPDATE_OPERATORS","defineAliasedType","assertShape","assertOptionalChainStart","assertValueType","assertNodeType","assertNodeOrValueType","assertEach","chain","assertOneOf","validateOptional","defineType","fields","elements","validate","default","process","env","BABEL_TYPES_8_BREAKING","undefined","visitor","aliases","operator","identifier","pattern","node","key","val","validator","left","right","builder","expression","inOp","Object","assign","oneOfNodeTypes","value","directives","body","label","optional","callee","arguments","typeArguments","typeParameters","param","test","consequent","alternate","program","comments","each","tokens","type","init","update","functionCommon","params","generator","async","functionTypeAnnotationCommon","returnType","functionDeclarationCommon","declare","id","predicate","parent","inherits","patternLikeCommon","typeAnnotation","decorators","name","TypeError","match","exec","parentKey","nonComp","computed","imported","meta","deprecatedAlias","flags","invalid","object","property","normal","sourceFile","sourceType","interpreter","properties","kind","shorthand","argument","Error","listKey","index","length","expressions","discriminant","cases","block","handler","finalizer","prefix","declarations","without","definite","superClass","superTypeParameters","implements","mixins","abstract","source","exportKind","assertions","declaration","specifiers","sourced","sourceless","local","exported","lval","await","module","importKind","classMethodOrPropertyCommon","accessibility","static","override","classMethodOrDeclareMethodCommon","access","tag","quasi","raw","cooked","templateElementCookedValidator","unterminatedCalled","error","str","firstInvalidLoc","unterminated","strictNumericEscape","invalidEscapeSequence","numericSeparatorInEscapeSequence","unexpectedNumericSeparator","invalidDigit","invalidCodePoint","tail","quasis","delegate","readonly","variance"],"sources":["../../src/definitions/core.ts"],"sourcesContent":["import is from \"../validators/is\";\nimport isValidIdentifier from \"../validators/isValidIdentifier\";\nimport { isKeyword, isReservedWord } from \"@babel/helper-validator-identifier\";\nimport type * as t from \"..\";\nimport { readStringContents } from \"@babel/helper-string-parser\";\n\nimport {\n  BINARY_OPERATORS,\n  LOGICAL_OPERATORS,\n  ASSIGNMENT_OPERATORS,\n  UNARY_OPERATORS,\n  UPDATE_OPERATORS,\n} from \"../constants\";\n\nimport {\n  defineAliasedType,\n  assertShape,\n  assertOptionalChainStart,\n  assertValueType,\n  assertNodeType,\n  assertNodeOrValueType,\n  assertEach,\n  chain,\n  assertOneOf,\n  validateOptional,\n  type Validator,\n} from \"./utils\";\n\nconst defineType = defineAliasedType(\"Standardized\");\n\ndefineType(\"ArrayExpression\", {\n  fields: {\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeOrValueType(\"null\", \"Expression\", \"SpreadElement\"),\n        ),\n      ),\n      default: !process.env.BABEL_TYPES_8_BREAKING ? [] : undefined,\n    },\n  },\n  visitor: [\"elements\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"AssignmentExpression\", {\n  fields: {\n    operator: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertValueType(\"string\");\n        }\n\n        const identifier = assertOneOf(...ASSIGNMENT_OPERATORS);\n        const pattern = assertOneOf(\"=\");\n\n        return function (node: t.AssignmentExpression, key, val) {\n          const validator = is(\"Pattern\", node.left) ? pattern : identifier;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"LVal\")\n        : assertNodeType(\n            \"Identifier\",\n            \"MemberExpression\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"BinaryExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...BINARY_OPERATORS),\n    },\n    left: {\n      validate: (function () {\n        const expression = assertNodeType(\"Expression\");\n        const inOp = assertNodeType(\"Expression\", \"PrivateName\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.BinaryExpression, key, val) {\n            const validator = node.operator === \"in\" ? inOp : expression;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `operator` property\n          { oneOfNodeTypes: [\"Expression\", \"PrivateName\"] },\n        );\n        return validator;\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n});\n\ndefineType(\"InterpreterDirective\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"Directive\", {\n  visitor: [\"value\"],\n  fields: {\n    value: {\n      validate: assertNodeType(\"DirectiveLiteral\"),\n    },\n  },\n});\n\ndefineType(\"DirectiveLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n});\n\ndefineType(\"BlockStatement\", {\n  builder: [\"body\", \"directives\"],\n  visitor: [\"directives\", \"body\"],\n  fields: {\n    directives: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Directive\")),\n      ),\n      default: [],\n    },\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\", \"Statement\"],\n});\n\ndefineType(\"BreakStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"CallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\", \"Super\", \"V8IntrinsicIdentifier\"),\n    },\n    arguments: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            \"SpreadElement\",\n            \"JSXNamespacedName\",\n            \"ArgumentPlaceholder\",\n          ),\n        ),\n      ),\n    },\n    ...(!process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertOneOf(true, false),\n            optional: true,\n          },\n        }\n      : {}),\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"CatchClause\", {\n  visitor: [\"param\", \"body\"],\n  fields: {\n    param: {\n      validate: assertNodeType(\"Identifier\", \"ArrayPattern\", \"ObjectPattern\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\"],\n});\n\ndefineType(\"ConditionalExpression\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    alternate: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Expression\", \"Conditional\"],\n});\n\ndefineType(\"ContinueStatement\", {\n  visitor: [\"label\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n  },\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n});\n\ndefineType(\"DebuggerStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"DoWhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n});\n\ndefineType(\"EmptyStatement\", {\n  aliases: [\"Statement\"],\n});\n\ndefineType(\"ExpressionStatement\", {\n  visitor: [\"expression\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n  aliases: [\"Statement\", \"ExpressionWrapper\"],\n});\n\ndefineType(\"File\", {\n  builder: [\"program\", \"comments\", \"tokens\"],\n  visitor: [\"program\"],\n  fields: {\n    program: {\n      validate: assertNodeType(\"Program\"),\n    },\n    comments: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? Object.assign(() => {}, {\n            each: { oneOfNodeTypes: [\"CommentBlock\", \"CommentLine\"] },\n          })\n        : assertEach(assertNodeType(\"CommentBlock\", \"CommentLine\")),\n      optional: true,\n    },\n    tokens: {\n      // todo(ts): add Token type\n      validate: assertEach(Object.assign(() => {}, { type: \"any\" })),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForInStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"VariableDeclaration\", \"LVal\")\n        : assertNodeType(\n            \"VariableDeclaration\",\n            \"Identifier\",\n            \"MemberExpression\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"ForStatement\", {\n  visitor: [\"init\", \"test\", \"update\", \"body\"],\n  aliases: [\"Scopable\", \"Statement\", \"For\", \"BlockParent\", \"Loop\"],\n  fields: {\n    init: {\n      validate: assertNodeType(\"VariableDeclaration\", \"Expression\"),\n      optional: true,\n    },\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    update: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\nexport const functionCommon = () => ({\n  params: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Identifier\", \"Pattern\", \"RestElement\")),\n    ),\n  },\n  generator: {\n    default: false,\n  },\n  async: {\n    default: false,\n  },\n});\n\nexport const functionTypeAnnotationCommon = () => ({\n  returnType: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  typeParameters: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeParameterDeclaration\", \"TSTypeParameterDeclaration\")\n      : assertNodeType(\n          \"TypeParameterDeclaration\",\n          \"TSTypeParameterDeclaration\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n});\n\nexport const functionDeclarationCommon = () => ({\n  ...functionCommon(),\n  declare: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  id: {\n    validate: assertNodeType(\"Identifier\"),\n    optional: true, // May be null for `export default function`\n  },\n});\n\ndefineType(\"FunctionDeclaration\", {\n  builder: [\"id\", \"params\", \"body\", \"generator\", \"async\"],\n  visitor: [\"id\", \"params\", \"body\", \"returnType\", \"typeParameters\"],\n  fields: {\n    ...functionDeclarationCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Statement\",\n    \"Pureish\",\n    \"Declaration\",\n  ],\n  validate: (function () {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return () => {};\n\n    const identifier = assertNodeType(\"Identifier\");\n\n    return function (parent, key, node) {\n      if (!is(\"ExportDefaultDeclaration\", parent)) {\n        identifier(node, \"id\", node.id);\n      }\n    };\n  })(),\n});\n\ndefineType(\"FunctionExpression\", {\n  inherits: \"FunctionDeclaration\",\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\nexport const patternLikeCommon = () => ({\n  typeAnnotation: {\n    validate: process.env.BABEL_8_BREAKING\n      ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n      : assertNodeType(\n          \"TypeAnnotation\",\n          \"TSTypeAnnotation\",\n          // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n          \"Noop\",\n        ),\n    optional: true,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  decorators: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Decorator\")),\n    ),\n    optional: true,\n  },\n});\n\ndefineType(\"Identifier\", {\n  builder: [\"name\"],\n  visitor: [\"typeAnnotation\", \"decorators\" /* for legacy param decorators */],\n  aliases: [\"Expression\", \"PatternLike\", \"LVal\", \"TSEntityName\"],\n  fields: {\n    ...patternLikeCommon(),\n    name: {\n      validate: chain(\n        assertValueType(\"string\"),\n        Object.assign(\n          function (node, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (!isValidIdentifier(val, false)) {\n              throw new TypeError(`\"${val}\" is not a valid identifier name`);\n            }\n          } as Validator,\n          { type: \"string\" },\n        ),\n      ),\n    },\n  },\n  validate(parent, key, node) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    const match = /\\.(\\w+)$/.exec(key);\n    if (!match) return;\n\n    const [, parentKey] = match;\n    const nonComp = { computed: false };\n\n    // We can't check if `parent.property === node`, because nodes are validated\n    // before replacing them in the AST.\n    if (parentKey === \"property\") {\n      if (is(\"MemberExpression\", parent, nonComp)) return;\n      if (is(\"OptionalMemberExpression\", parent, nonComp)) return;\n    } else if (parentKey === \"key\") {\n      if (is(\"Property\", parent, nonComp)) return;\n      if (is(\"Method\", parent, nonComp)) return;\n    } else if (parentKey === \"exported\") {\n      if (is(\"ExportSpecifier\", parent)) return;\n    } else if (parentKey === \"imported\") {\n      if (is(\"ImportSpecifier\", parent, { imported: node })) return;\n    } else if (parentKey === \"meta\") {\n      if (is(\"MetaProperty\", parent, { meta: node })) return;\n    }\n\n    if (\n      // Ideally we should call isStrictReservedWord if this node is a descendant\n      // of a block in strict mode. Also, we should pass the inModule option so\n      // we can disable \"await\" in module.\n      (isKeyword(node.name) || isReservedWord(node.name, false)) &&\n      // Even if \"this\" is a keyword, we are using the Identifier\n      // node to represent it.\n      node.name !== \"this\"\n    ) {\n      throw new TypeError(`\"${node.name}\" is not a valid identifier`);\n    }\n  },\n});\n\ndefineType(\"IfStatement\", {\n  visitor: [\"test\", \"consequent\", \"alternate\"],\n  aliases: [\"Statement\", \"Conditional\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    consequent: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    alternate: {\n      optional: true,\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"LabeledStatement\", {\n  visitor: [\"label\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    label: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"StringLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NumericLiteral\", {\n  builder: [\"value\"],\n  deprecatedAlias: \"NumberLiteral\",\n  fields: {\n    value: {\n      validate: assertValueType(\"number\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"NullLiteral\", {\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"BooleanLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"boolean\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"RegExpLiteral\", {\n  builder: [\"pattern\", \"flags\"],\n  deprecatedAlias: \"RegexLiteral\",\n  aliases: [\"Expression\", \"Pureish\", \"Literal\"],\n  fields: {\n    pattern: {\n      validate: assertValueType(\"string\"),\n    },\n    flags: {\n      validate: chain(\n        assertValueType(\"string\"),\n        Object.assign(\n          function (node, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            const invalid = /[^gimsuy]/.exec(val);\n            if (invalid) {\n              throw new TypeError(`\"${invalid[0]}\" is not a valid RegExp flag`);\n            }\n          } as Validator,\n          { type: \"string\" },\n        ),\n      ),\n      default: \"\",\n    },\n  },\n});\n\ndefineType(\"LogicalExpression\", {\n  builder: [\"operator\", \"left\", \"right\"],\n  visitor: [\"left\", \"right\"],\n  aliases: [\"Binary\", \"Expression\"],\n  fields: {\n    operator: {\n      validate: assertOneOf(...LOGICAL_OPERATORS),\n    },\n    left: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"MemberExpression\", {\n  builder: [\n    \"object\",\n    \"property\",\n    \"computed\",\n    ...(!process.env.BABEL_TYPES_8_BREAKING ? [\"optional\"] : []),\n  ],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\", \"LVal\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\", \"Super\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\", \"PrivateName\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (\n          node: t.MemberExpression,\n          key,\n          val,\n        ) {\n          const validator: Validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\"Expression\", \"Identifier\", \"PrivateName\"];\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    ...(!process.env.BABEL_TYPES_8_BREAKING\n      ? {\n          optional: {\n            validate: assertOneOf(true, false),\n            optional: true,\n          },\n        }\n      : {}),\n  },\n});\n\ndefineType(\"NewExpression\", { inherits: \"CallExpression\" });\n\ndefineType(\"Program\", {\n  // Note: We explicitly leave 'interpreter' out here because it is\n  // conceptually comment-like, and Babel does not traverse comments either.\n  visitor: [\"directives\", \"body\"],\n  builder: [\"body\", \"directives\", \"sourceType\", \"interpreter\"],\n  fields: {\n    sourceFile: {\n      validate: assertValueType(\"string\"),\n    },\n    sourceType: {\n      validate: assertOneOf(\"script\", \"module\"),\n      default: \"script\",\n    },\n    interpreter: {\n      validate: assertNodeType(\"InterpreterDirective\"),\n      default: null,\n      optional: true,\n    },\n    directives: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Directive\")),\n      ),\n      default: [],\n    },\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"Block\"],\n});\n\ndefineType(\"ObjectExpression\", {\n  visitor: [\"properties\"],\n  aliases: [\"Expression\"],\n  fields: {\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"ObjectMethod\", \"ObjectProperty\", \"SpreadElement\"),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"ObjectMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"computed\", \"generator\", \"async\"],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"method\", \"get\", \"set\"),\n      ...(!process.env.BABEL_TYPES_8_BREAKING ? { default: \"method\" } : {}),\n    },\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = function (node: t.ObjectMethod, key, val) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n        // @ts-expect-error todo(ts): can be discriminated union by `computed` property\n        validator.oneOfNodeTypes = [\n          \"Expression\",\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n        ];\n        return validator;\n      })(),\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  aliases: [\n    \"UserWhitespacable\",\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"ObjectMember\",\n  ],\n});\n\ndefineType(\"ObjectProperty\", {\n  builder: [\n    \"key\",\n    \"value\",\n    \"computed\",\n    \"shorthand\",\n    ...(!process.env.BABEL_TYPES_8_BREAKING ? [\"decorators\"] : []),\n  ],\n  fields: {\n    computed: {\n      default: false,\n    },\n    key: {\n      validate: (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n          \"DecimalLiteral\",\n          \"PrivateName\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.ObjectProperty, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          {\n            // todo(ts): can be discriminated union by `computed` property\n            oneOfNodeTypes: [\n              \"Expression\",\n              \"Identifier\",\n              \"StringLiteral\",\n              \"NumericLiteral\",\n              \"BigIntLiteral\",\n              \"DecimalLiteral\",\n              \"PrivateName\",\n            ],\n          },\n        );\n        return validator;\n      })(),\n    },\n    value: {\n      // Value may be PatternLike if this is an AssignmentProperty\n      // https://github.com/babel/babylon/issues/434\n      validate: assertNodeType(\"Expression\", \"PatternLike\"),\n    },\n    shorthand: {\n      validate: chain(\n        assertValueType(\"boolean\"),\n        Object.assign(\n          function (node: t.ObjectProperty, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (val && node.computed) {\n              throw new TypeError(\n                \"Property shorthand of ObjectProperty cannot be true if computed is true\",\n              );\n            }\n          } as Validator,\n          { type: \"boolean\" },\n        ),\n        function (node: t.ObjectProperty, key, val) {\n          if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n          if (val && !is(\"Identifier\", node.key)) {\n            throw new TypeError(\n              \"Property shorthand of ObjectProperty cannot be true if key is not an Identifier\",\n            );\n          }\n        } as Validator,\n      ),\n      default: false,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n  visitor: [\"key\", \"value\", \"decorators\"],\n  aliases: [\"UserWhitespacable\", \"Property\", \"ObjectMember\"],\n  validate: (function () {\n    const pattern = assertNodeType(\n      \"Identifier\",\n      \"Pattern\",\n      \"TSAsExpression\",\n      \"TSSatisfiesExpression\",\n      \"TSNonNullExpression\",\n      \"TSTypeAssertion\",\n    );\n    const expression = assertNodeType(\"Expression\");\n\n    return function (parent, key, node) {\n      if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n      const validator = is(\"ObjectPattern\", parent) ? pattern : expression;\n      validator(node, \"value\", node.value);\n    };\n  })(),\n});\n\ndefineType(\"RestElement\", {\n  visitor: [\"argument\", \"typeAnnotation\"],\n  builder: [\"argument\"],\n  aliases: [\"LVal\", \"PatternLike\"],\n  deprecatedAlias: \"RestProperty\",\n  fields: {\n    ...patternLikeCommon(),\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"LVal\")\n        : assertNodeType(\n            \"Identifier\",\n            \"ArrayPattern\",\n            \"ObjectPattern\",\n            \"MemberExpression\",\n            \"TSAsExpression\",\n            \"TSSatisfiesExpression\",\n            \"TSTypeAssertion\",\n            \"TSNonNullExpression\",\n          ),\n    },\n  },\n  validate(parent: t.ArrayPattern | t.ObjectPattern, key) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    const match = /(\\w+)\\[(\\d+)\\]/.exec(key);\n    if (!match) throw new Error(\"Internal Babel error: malformed key.\");\n\n    const [, listKey, index] = match as unknown as [\n      string,\n      keyof typeof parent,\n      string,\n    ];\n    if ((parent[listKey] as t.Node[]).length > +index + 1) {\n      throw new TypeError(`RestElement must be last element of ${listKey}`);\n    }\n  },\n});\n\ndefineType(\"ReturnStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"SequenceExpression\", {\n  visitor: [\"expressions\"],\n  fields: {\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Expression\")),\n      ),\n    },\n  },\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ParenthesizedExpression\", {\n  visitor: [\"expression\"],\n  aliases: [\"Expression\", \"ExpressionWrapper\"],\n  fields: {\n    expression: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"SwitchCase\", {\n  visitor: [\"test\", \"consequent\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    consequent: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"SwitchStatement\", {\n  visitor: [\"discriminant\", \"cases\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Scopable\"],\n  fields: {\n    discriminant: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    cases: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"SwitchCase\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ThisExpression\", {\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"ThrowStatement\", {\n  visitor: [\"argument\"],\n  aliases: [\"Statement\", \"Terminatorless\", \"CompletionStatement\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"TryStatement\", {\n  visitor: [\"block\", \"handler\", \"finalizer\"],\n  aliases: [\"Statement\"],\n  fields: {\n    block: {\n      validate: chain(\n        assertNodeType(\"BlockStatement\"),\n        Object.assign(\n          function (node: t.TryStatement) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            // This validator isn't put at the top level because we can run it\n            // even if this node doesn't have a parent.\n\n            if (!node.handler && !node.finalizer) {\n              throw new TypeError(\n                \"TryStatement expects either a handler or finalizer, or both\",\n              );\n            }\n          } as Validator,\n          {\n            oneOfNodeTypes: [\"BlockStatement\"],\n          },\n        ),\n      ),\n    },\n    handler: {\n      optional: true,\n      validate: assertNodeType(\"CatchClause\"),\n    },\n    finalizer: {\n      optional: true,\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"UnaryExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: true,\n    },\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UNARY_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\", \"Expression\"],\n});\n\ndefineType(\"UpdateExpression\", {\n  builder: [\"operator\", \"argument\", \"prefix\"],\n  fields: {\n    prefix: {\n      default: false,\n    },\n    argument: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertNodeType(\"Expression\")\n        : assertNodeType(\"Identifier\", \"MemberExpression\"),\n    },\n    operator: {\n      validate: assertOneOf(...UPDATE_OPERATORS),\n    },\n  },\n  visitor: [\"argument\"],\n  aliases: [\"Expression\"],\n});\n\ndefineType(\"VariableDeclaration\", {\n  builder: [\"kind\", \"declarations\"],\n  visitor: [\"declarations\"],\n  aliases: [\"Statement\", \"Declaration\"],\n  fields: {\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    kind: {\n      validate: assertOneOf(\n        \"var\",\n        \"let\",\n        \"const\",\n        // https://github.com/tc39/proposal-explicit-resource-management\n        \"using\",\n      ),\n    },\n    declarations: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"VariableDeclarator\")),\n      ),\n    },\n  },\n  validate(parent, key, node) {\n    if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n    if (!is(\"ForXStatement\", parent, { left: node })) return;\n    if (node.declarations.length !== 1) {\n      throw new TypeError(\n        `Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`,\n      );\n    }\n  },\n});\n\ndefineType(\"VariableDeclarator\", {\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertNodeType(\"LVal\");\n        }\n\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"ArrayPattern\",\n          \"ObjectPattern\",\n        );\n        const without = assertNodeType(\"Identifier\");\n\n        return function (node: t.VariableDeclarator, key, val) {\n          const validator = node.init ? normal : without;\n          validator(node, key, val);\n        };\n      })(),\n    },\n    definite: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    init: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\"WhileStatement\", {\n  visitor: [\"test\", \"body\"],\n  aliases: [\"Statement\", \"BlockParent\", \"Loop\", \"While\", \"Scopable\"],\n  fields: {\n    test: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\ndefineType(\"WithStatement\", {\n  visitor: [\"object\", \"body\"],\n  aliases: [\"Statement\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n  },\n});\n\n// --- ES2015 ---\ndefineType(\"AssignmentPattern\", {\n  visitor: [\"left\", \"right\", \"decorators\" /* for legacy param decorators */],\n  builder: [\"left\", \"right\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    left: {\n      validate: assertNodeType(\n        \"Identifier\",\n        \"ObjectPattern\",\n        \"ArrayPattern\",\n        \"MemberExpression\",\n        \"TSAsExpression\",\n        \"TSSatisfiesExpression\",\n        \"TSTypeAssertion\",\n        \"TSNonNullExpression\",\n      ),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    // For TypeScript\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ArrayPattern\", {\n  visitor: [\"elements\", \"typeAnnotation\"],\n  builder: [\"elements\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    elements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeOrValueType(\"null\", \"PatternLike\", \"LVal\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ArrowFunctionExpression\", {\n  builder: [\"params\", \"body\", \"async\"],\n  visitor: [\"params\", \"body\", \"returnType\", \"typeParameters\"],\n  aliases: [\n    \"Scopable\",\n    \"Function\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Expression\",\n    \"Pureish\",\n  ],\n  fields: {\n    ...functionCommon(),\n    ...functionTypeAnnotationCommon(),\n    expression: {\n      // https://github.com/babel/babylon/issues/505\n      validate: assertValueType(\"boolean\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\", \"Expression\"),\n    },\n    predicate: {\n      validate: assertNodeType(\"DeclaredPredicate\", \"InferredPredicate\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassBody\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ClassMethod\",\n            \"ClassPrivateMethod\",\n            \"ClassProperty\",\n            \"ClassPrivateProperty\",\n            \"ClassAccessorProperty\",\n            \"TSDeclareMethod\",\n            \"TSIndexSignature\",\n            \"StaticBlock\",\n          ),\n        ),\n      ),\n    },\n  },\n});\n\ndefineType(\"ClassExpression\", {\n  builder: [\"id\", \"superClass\", \"body\", \"decorators\"],\n  visitor: [\n    \"id\",\n    \"body\",\n    \"superClass\",\n    \"mixins\",\n    \"typeParameters\",\n    \"superTypeParameters\",\n    \"implements\",\n    \"decorators\",\n  ],\n  aliases: [\"Scopable\", \"Class\", \"Expression\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n      // In declarations, this is missing if this is the\n      // child of an ExportDefaultDeclaration.\n      optional: true,\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    superTypeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n        ),\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassDeclaration\", {\n  inherits: \"ClassExpression\",\n  aliases: [\"Scopable\", \"Class\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    typeParameters: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n          )\n        : assertNodeType(\n            \"TypeParameterDeclaration\",\n            \"TSTypeParameterDeclaration\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    body: {\n      validate: assertNodeType(\"ClassBody\"),\n    },\n    superClass: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n    superTypeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n    implements: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\"TSExpressionWithTypeArguments\", \"ClassImplements\"),\n        ),\n      ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    mixins: {\n      validate: assertNodeType(\"InterfaceExtends\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    abstract: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n  },\n  validate: (function () {\n    const identifier = assertNodeType(\"Identifier\");\n\n    return function (parent, key, node) {\n      if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n      if (!is(\"ExportDefaultDeclaration\", parent)) {\n        identifier(node, \"id\", node.id);\n      }\n    };\n  })(),\n});\n\ndefineType(\"ExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"ExportDefaultDeclaration\", {\n  visitor: [\"declaration\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      validate: assertNodeType(\n        \"TSDeclareFunction\",\n        \"FunctionDeclaration\",\n        \"ClassDeclaration\",\n        \"Expression\",\n      ),\n    },\n    exportKind: validateOptional(assertOneOf(\"value\")),\n  },\n});\n\ndefineType(\"ExportNamedDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\n    \"Statement\",\n    \"Declaration\",\n    \"ImportOrExportDeclaration\",\n    \"ExportDeclaration\",\n  ],\n  fields: {\n    declaration: {\n      optional: true,\n      validate: chain(\n        assertNodeType(\"Declaration\"),\n        Object.assign(\n          function (node: t.ExportNamedDeclaration, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            // This validator isn't put at the top level because we can run it\n            // even if this node doesn't have a parent.\n\n            if (val && node.specifiers.length) {\n              throw new TypeError(\n                \"Only declaration or specifiers is allowed on ExportNamedDeclaration\",\n              );\n            }\n          } as Validator,\n          { oneOfNodeTypes: [\"Declaration\"] },\n        ),\n        function (node: t.ExportNamedDeclaration, key, val) {\n          if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n          // This validator isn't put at the top level because we can run it\n          // even if this node doesn't have a parent.\n\n          if (val && node.source) {\n            throw new TypeError(\"Cannot export a declaration from a source\");\n          }\n        },\n      ),\n    },\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    specifiers: {\n      default: [],\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          (function () {\n            const sourced = assertNodeType(\n              \"ExportSpecifier\",\n              \"ExportDefaultSpecifier\",\n              \"ExportNamespaceSpecifier\",\n            );\n            const sourceless = assertNodeType(\"ExportSpecifier\");\n\n            if (!process.env.BABEL_TYPES_8_BREAKING) return sourced;\n\n            return function (node: t.ExportNamedDeclaration, key, val) {\n              const validator = node.source ? sourced : sourceless;\n              validator(node, key, val);\n            } as Validator;\n          })(),\n        ),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n      optional: true,\n    },\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"ExportSpecifier\", {\n  visitor: [\"local\", \"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    exported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    exportKind: {\n      // And TypeScript's \"export { type foo } from\"\n      validate: assertOneOf(\"type\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ForOfStatement\", {\n  visitor: [\"left\", \"right\", \"body\"],\n  builder: [\"left\", \"right\", \"body\", \"await\"],\n  aliases: [\n    \"Scopable\",\n    \"Statement\",\n    \"For\",\n    \"BlockParent\",\n    \"Loop\",\n    \"ForXStatement\",\n  ],\n  fields: {\n    left: {\n      validate: (function () {\n        if (!process.env.BABEL_TYPES_8_BREAKING) {\n          return assertNodeType(\"VariableDeclaration\", \"LVal\");\n        }\n\n        const declaration = assertNodeType(\"VariableDeclaration\");\n        const lval = assertNodeType(\n          \"Identifier\",\n          \"MemberExpression\",\n          \"ArrayPattern\",\n          \"ObjectPattern\",\n          \"TSAsExpression\",\n          \"TSSatisfiesExpression\",\n          \"TSTypeAssertion\",\n          \"TSNonNullExpression\",\n        );\n\n        return function (node, key, val) {\n          if (is(\"VariableDeclaration\", val)) {\n            declaration(node, key, val);\n          } else {\n            lval(node, key, val);\n          }\n        };\n      })(),\n    },\n    right: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    body: {\n      validate: assertNodeType(\"Statement\"),\n    },\n    await: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"ImportDeclaration\", {\n  visitor: [\"specifiers\", \"source\"],\n  aliases: [\"Statement\", \"Declaration\", \"ImportOrExportDeclaration\"],\n  fields: {\n    assertions: {\n      optional: true,\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"ImportAttribute\")),\n      ),\n    },\n    module: {\n      optional: true,\n      validate: assertValueType(\"boolean\"),\n    },\n    specifiers: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"ImportSpecifier\",\n            \"ImportDefaultSpecifier\",\n            \"ImportNamespaceSpecifier\",\n          ),\n        ),\n      ),\n    },\n    source: {\n      validate: assertNodeType(\"StringLiteral\"),\n    },\n    importKind: {\n      // Handle TypeScript/Flowtype's extension \"import type foo from\"\n      // TypeScript doesn't support typeof\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ImportDefaultSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportNamespaceSpecifier\", {\n  visitor: [\"local\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"ImportSpecifier\", {\n  visitor: [\"local\", \"imported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    local: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n    imported: {\n      validate: assertNodeType(\"Identifier\", \"StringLiteral\"),\n    },\n    importKind: {\n      // Handle Flowtype's extension \"import {typeof foo} from\"\n      // And TypeScript's \"import { type foo } from\"\n      validate: assertOneOf(\"type\", \"typeof\", \"value\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"MetaProperty\", {\n  visitor: [\"meta\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    meta: {\n      validate: chain(\n        assertNodeType(\"Identifier\"),\n        Object.assign(\n          function (node: t.MetaProperty, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            let property;\n            switch (val.name) {\n              case \"function\":\n                property = \"sent\";\n                break;\n              case \"new\":\n                property = \"target\";\n                break;\n              case \"import\":\n                property = \"meta\";\n                break;\n            }\n            if (!is(\"Identifier\", node.property, { name: property })) {\n              throw new TypeError(\"Unrecognised MetaProperty\");\n            }\n          } as Validator,\n          { oneOfNodeTypes: [\"Identifier\"] },\n        ),\n      ),\n    },\n    property: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\nexport const classMethodOrPropertyCommon = () => ({\n  abstract: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  accessibility: {\n    validate: assertOneOf(\"public\", \"private\", \"protected\"),\n    optional: true,\n  },\n  static: {\n    default: false,\n  },\n  override: {\n    default: false,\n  },\n  computed: {\n    default: false,\n  },\n  optional: {\n    validate: assertValueType(\"boolean\"),\n    optional: true,\n  },\n  key: {\n    validate: chain(\n      (function () {\n        const normal = assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n        );\n        const computed = assertNodeType(\"Expression\");\n\n        return function (node: any, key: string, val: any) {\n          const validator = node.computed ? computed : normal;\n          validator(node, key, val);\n        };\n      })(),\n      assertNodeType(\n        \"Identifier\",\n        \"StringLiteral\",\n        \"NumericLiteral\",\n        \"BigIntLiteral\",\n        \"Expression\",\n      ),\n    ),\n  },\n});\n\nexport const classMethodOrDeclareMethodCommon = () => ({\n  ...functionCommon(),\n  ...classMethodOrPropertyCommon(),\n  params: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(\n        assertNodeType(\n          \"Identifier\",\n          \"Pattern\",\n          \"RestElement\",\n          \"TSParameterProperty\",\n        ),\n      ),\n    ),\n  },\n  kind: {\n    validate: assertOneOf(\"get\", \"set\", \"method\", \"constructor\"),\n    default: \"method\",\n  },\n  access: {\n    validate: chain(\n      assertValueType(\"string\"),\n      assertOneOf(\"public\", \"private\", \"protected\"),\n    ),\n    optional: true,\n  },\n  decorators: {\n    validate: chain(\n      assertValueType(\"array\"),\n      assertEach(assertNodeType(\"Decorator\")),\n    ),\n    optional: true,\n  },\n});\n\ndefineType(\"ClassMethod\", {\n  aliases: [\"Function\", \"Scopable\", \"BlockParent\", \"FunctionParent\", \"Method\"],\n  builder: [\n    \"kind\",\n    \"key\",\n    \"params\",\n    \"body\",\n    \"computed\",\n    \"static\",\n    \"generator\",\n    \"async\",\n  ],\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"ObjectPattern\", {\n  visitor: [\n    \"properties\",\n    \"typeAnnotation\",\n    \"decorators\" /* for legacy param decorators */,\n  ],\n  builder: [\"properties\"],\n  aliases: [\"Pattern\", \"PatternLike\", \"LVal\"],\n  fields: {\n    ...patternLikeCommon(),\n    properties: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"RestElement\", \"ObjectProperty\")),\n      ),\n    },\n  },\n});\n\ndefineType(\"SpreadElement\", {\n  visitor: [\"argument\"],\n  aliases: [\"UnaryLike\"],\n  deprecatedAlias: \"SpreadProperty\",\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\ndefineType(\n  \"Super\",\n  process.env.BABEL_8_BREAKING\n    ? undefined\n    : {\n        aliases: [\"Expression\"],\n      },\n);\n\ndefineType(\"TaggedTemplateExpression\", {\n  visitor: [\"tag\", \"quasi\", \"typeParameters\"],\n  builder: [\"tag\", \"quasi\"],\n  aliases: [\"Expression\"],\n  fields: {\n    tag: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    quasi: {\n      validate: assertNodeType(\"TemplateLiteral\"),\n    },\n    typeParameters: {\n      validate: assertNodeType(\n        \"TypeParameterInstantiation\",\n        \"TSTypeParameterInstantiation\",\n      ),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"TemplateElement\", {\n  builder: [\"value\", \"tail\"],\n  fields: {\n    value: {\n      validate: chain(\n        assertShape({\n          raw: {\n            validate: assertValueType(\"string\"),\n          },\n          cooked: {\n            validate: assertValueType(\"string\"),\n            optional: true,\n          },\n        }),\n        function templateElementCookedValidator(node: t.TemplateElement) {\n          const raw = node.value.raw;\n\n          let unterminatedCalled = false;\n\n          const error = () => {\n            // unreachable\n            throw new Error(\"Internal @babel/types error.\");\n          };\n          const { str, firstInvalidLoc } = readStringContents(\n            \"template\",\n            raw,\n            0,\n            0,\n            0,\n            {\n              unterminated() {\n                unterminatedCalled = true;\n              },\n              strictNumericEscape: error,\n              invalidEscapeSequence: error,\n              numericSeparatorInEscapeSequence: error,\n              unexpectedNumericSeparator: error,\n              invalidDigit: error,\n              invalidCodePoint: error,\n            },\n          );\n          if (!unterminatedCalled) throw new Error(\"Invalid raw\");\n\n          node.value.cooked = firstInvalidLoc ? null : str;\n        },\n      ),\n    },\n    tail: {\n      default: false,\n    },\n  },\n});\n\ndefineType(\"TemplateLiteral\", {\n  visitor: [\"quasis\", \"expressions\"],\n  aliases: [\"Expression\", \"Literal\"],\n  fields: {\n    quasis: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"TemplateElement\")),\n      ),\n    },\n    expressions: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            // For TypeScript template literal types\n            \"TSType\",\n          ),\n        ),\n        function (node: t.TemplateLiteral, key, val) {\n          if (node.quasis.length !== val.length + 1) {\n            throw new TypeError(\n              `Number of ${\n                node.type\n              } quasis should be exactly one more than the number of expressions.\\nExpected ${\n                val.length + 1\n              } quasis but got ${node.quasis.length}`,\n            );\n          }\n        } as Validator,\n      ),\n    },\n  },\n});\n\ndefineType(\"YieldExpression\", {\n  builder: [\"argument\", \"delegate\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    delegate: {\n      validate: chain(\n        assertValueType(\"boolean\"),\n        Object.assign(\n          function (node: t.YieldExpression, key, val) {\n            if (!process.env.BABEL_TYPES_8_BREAKING) return;\n\n            if (val && !node.argument) {\n              throw new TypeError(\n                \"Property delegate of YieldExpression cannot be true if there is no argument\",\n              );\n            }\n          } as Validator,\n          { type: \"boolean\" },\n        ),\n      ),\n      default: false,\n    },\n    argument: {\n      optional: true,\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2017 ---\ndefineType(\"AwaitExpression\", {\n  builder: [\"argument\"],\n  visitor: [\"argument\"],\n  aliases: [\"Expression\", \"Terminatorless\"],\n  fields: {\n    argument: {\n      validate: assertNodeType(\"Expression\"),\n    },\n  },\n});\n\n// --- ES2019 ---\ndefineType(\"Import\", {\n  aliases: [\"Expression\"],\n});\n\n// --- ES2020 ---\ndefineType(\"BigIntLiteral\", {\n  builder: [\"value\"],\n  fields: {\n    value: {\n      validate: assertValueType(\"string\"),\n    },\n  },\n  aliases: [\"Expression\", \"Pureish\", \"Literal\", \"Immutable\"],\n});\n\ndefineType(\"ExportNamespaceSpecifier\", {\n  visitor: [\"exported\"],\n  aliases: [\"ModuleSpecifier\"],\n  fields: {\n    exported: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"OptionalMemberExpression\", {\n  builder: [\"object\", \"property\", \"computed\", \"optional\"],\n  visitor: [\"object\", \"property\"],\n  aliases: [\"Expression\"],\n  fields: {\n    object: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    property: {\n      validate: (function () {\n        const normal = assertNodeType(\"Identifier\");\n        const computed = assertNodeType(\"Expression\");\n\n        const validator: Validator = Object.assign(\n          function (node: t.OptionalMemberExpression, key, val) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          } as Validator,\n          // todo(ts): can be discriminated union by `computed` property\n          { oneOfNodeTypes: [\"Expression\", \"Identifier\"] },\n        );\n        return validator;\n      })(),\n    },\n    computed: {\n      default: false,\n    },\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertValueType(\"boolean\")\n        : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n  },\n});\n\ndefineType(\"OptionalCallExpression\", {\n  visitor: [\"callee\", \"arguments\", \"typeParameters\", \"typeArguments\"],\n  builder: [\"callee\", \"arguments\", \"optional\"],\n  aliases: [\"Expression\"],\n  fields: {\n    callee: {\n      validate: assertNodeType(\"Expression\"),\n    },\n    arguments: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(\n          assertNodeType(\n            \"Expression\",\n            \"SpreadElement\",\n            \"JSXNamespacedName\",\n            \"ArgumentPlaceholder\",\n          ),\n        ),\n      ),\n    },\n    optional: {\n      validate: !process.env.BABEL_TYPES_8_BREAKING\n        ? assertValueType(\"boolean\")\n        : chain(assertValueType(\"boolean\"), assertOptionalChainStart()),\n    },\n    typeArguments: {\n      validate: assertNodeType(\"TypeParameterInstantiation\"),\n      optional: true,\n    },\n    typeParameters: {\n      validate: assertNodeType(\"TSTypeParameterInstantiation\"),\n      optional: true,\n    },\n  },\n});\n\n// --- ES2022 ---\ndefineType(\"ClassProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassAccessorProperty\", {\n  visitor: [\"key\", \"value\", \"typeAnnotation\", \"decorators\"],\n  builder: [\n    \"key\",\n    \"value\",\n    \"typeAnnotation\",\n    \"decorators\",\n    \"computed\",\n    \"static\",\n  ],\n  aliases: [\"Property\", \"Accessor\"],\n  fields: {\n    ...classMethodOrPropertyCommon(),\n    key: {\n      validate: chain(\n        (function () {\n          const normal = assertNodeType(\n            \"Identifier\",\n            \"StringLiteral\",\n            \"NumericLiteral\",\n            \"BigIntLiteral\",\n            \"PrivateName\",\n          );\n          const computed = assertNodeType(\"Expression\");\n\n          return function (node: any, key: string, val: any) {\n            const validator = node.computed ? computed : normal;\n            validator(node, key, val);\n          };\n        })(),\n        assertNodeType(\n          \"Identifier\",\n          \"StringLiteral\",\n          \"NumericLiteral\",\n          \"BigIntLiteral\",\n          \"Expression\",\n          \"PrivateName\",\n        ),\n      ),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    declare: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateProperty\", {\n  visitor: [\"key\", \"value\", \"decorators\", \"typeAnnotation\"],\n  builder: [\"key\", \"value\", \"decorators\", \"static\"],\n  aliases: [\"Property\", \"Private\"],\n  fields: {\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    value: {\n      validate: assertNodeType(\"Expression\"),\n      optional: true,\n    },\n    typeAnnotation: {\n      validate: process.env.BABEL_8_BREAKING\n        ? assertNodeType(\"TypeAnnotation\", \"TSTypeAnnotation\")\n        : assertNodeType(\n            \"TypeAnnotation\",\n            \"TSTypeAnnotation\",\n            // @ts-ignore(Babel 7 vs Babel 8) Babel 7 AST\n            \"Noop\",\n          ),\n      optional: true,\n    },\n    decorators: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Decorator\")),\n      ),\n      optional: true,\n    },\n    static: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    readonly: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    definite: {\n      validate: assertValueType(\"boolean\"),\n      optional: true,\n    },\n    variance: {\n      validate: assertNodeType(\"Variance\"),\n      optional: true,\n    },\n  },\n});\n\ndefineType(\"ClassPrivateMethod\", {\n  builder: [\"kind\", \"key\", \"params\", \"body\", \"static\"],\n  visitor: [\n    \"key\",\n    \"params\",\n    \"body\",\n    \"decorators\",\n    \"returnType\",\n    \"typeParameters\",\n  ],\n  aliases: [\n    \"Function\",\n    \"Scopable\",\n    \"BlockParent\",\n    \"FunctionParent\",\n    \"Method\",\n    \"Private\",\n  ],\n  fields: {\n    ...classMethodOrDeclareMethodCommon(),\n    ...functionTypeAnnotationCommon(),\n    kind: {\n      validate: assertOneOf(\"get\", \"set\", \"method\"),\n      default: \"method\",\n    },\n    key: {\n      validate: assertNodeType(\"PrivateName\"),\n    },\n    body: {\n      validate: assertNodeType(\"BlockStatement\"),\n    },\n  },\n});\n\ndefineType(\"PrivateName\", {\n  visitor: [\"id\"],\n  aliases: [\"Private\"],\n  fields: {\n    id: {\n      validate: assertNodeType(\"Identifier\"),\n    },\n  },\n});\n\ndefineType(\"StaticBlock\", {\n  visitor: [\"body\"],\n  fields: {\n    body: {\n      validate: chain(\n        assertValueType(\"array\"),\n        assertEach(assertNodeType(\"Statement\")),\n      ),\n    },\n  },\n  aliases: [\"Scopable\", \"BlockParent\", \"FunctionParent\"],\n});\n"],"mappings":"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"}