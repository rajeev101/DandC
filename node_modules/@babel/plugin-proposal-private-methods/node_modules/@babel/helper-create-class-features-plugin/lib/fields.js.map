{"version":3,"names":["template","traverse","types","t","ReplaceSupers","environmentVisitor","memberExpressionToFunctions","optimiseCall","annotateAsPure","isTransparentExprWrapper","ts","buildPrivateNamesMap","props","privateNamesMap","Map","prop","isPrivate","name","node","key","id","update","has","get","scope","generateUidIdentifier","static","method","isProperty","isClassPrivateMethod","kind","getId","setId","methodId","set","buildPrivateNamesNodes","privateFieldsAsProperties","privateFieldsAsSymbols","state","initNodes","value","isStatic","isMethod","isAccessor","cloneNode","init","callExpression","addHelper","stringLiteral","identifier","newExpression","push","statement","ast","privateNameVisitorFactory","visitor","nestedVisitor","visitors","merge","Object","assign","privateNameVisitor","Class","path","body","visiblePrivateNames","redeclared","delete","length","skipKey","PrivateName","noDocumentAll","parentPath","isMemberExpression","property","isOptionalMemberExpression","includes","handle","unshadow","innerBinding","_scope","hasBinding","bindingIdentifierEquals","rename","parent","buildCheckInRHS","rhs","file","inRHSIsObject","availableHelper","privateInVisitor","BinaryExpression","operator","left","right","isPrivateName","classRef","replaceWith","expression","privateNameHandlerSpec","memoise","member","count","object","memo","maybeGenerateMemoised","memoiser","receiver","helperName","sequenceExpression","console","warn","boundGet","memberExpression","destructureSet","helper","_unused","Error","call","args","optionalCall","privateNameHandlerLoose","BASE","REF","PROP","simpleSet","optionalCallExpression","transformPrivateNamesUsage","ref","size","handler","buildPrivateFieldInitLoose","buildUndefinedNode","inheritPropComments","buildPrivateInstanceFieldInitSpec","thisExpression","buildPrivateStaticFieldInitSpec","privateName","initAdded","buildPrivateMethodInitLoose","buildPrivateInstanceMethodInitSpec","buildPrivateAccessorInitialization","buildPrivateInstanceMethodInitialization","buildPublicFieldInitLoose","computed","expressionStatement","assignmentExpression","isLiteral","buildPublicFieldInitSpec","buildPrivateStaticMethodInitLoose","buildPrivateMethodDeclaration","getterDeclared","setterDeclared","params","generator","async","isGetter","isSetter","declId","functionDeclaration","thisContextVisitor","ThisExpression","findParent","isUnaryExpression","booleanLiteral","needsClassRef","MetaProperty","meta","isIdentifier","innerReferencesVisitor","ReferencedIdentifier","replaceThisContext","getSuperRef","isStaticBlock","constantSuper","innerBindingRef","_state$classRef","replacer","methodPath","refToPreserve","getObjectRef","replace","isNameOrLength","type","inheritLeadingComments","inheritInnerComments","buildFieldsInitNodes","superRef","setPublicClassFields","injectSuperRef","staticNodes","instanceNodes","pureStaticNodes","_injectSuperRef","generateUidIdentifierBasedOnNode","isClassProperty","assertFieldTransformed","isInstance","isPublic","isField","replaced","blockBody","isExpressionStatement","inheritsComments","unshift","filter","Boolean","wrapClass","leadingComments","remove","superClass","isClassExpression"],"sources":["../src/fields.ts"],"sourcesContent":["import { template, traverse, types as t } from \"@babel/core\";\nimport type { File } from \"@babel/core\";\nimport type { NodePath, Visitor, Scope } from \"@babel/traverse\";\nimport ReplaceSupers from \"@babel/helper-replace-supers\";\nimport environmentVisitor from \"@babel/helper-environment-visitor\";\nimport memberExpressionToFunctions from \"@babel/helper-member-expression-to-functions\";\nimport type {\n  Handler,\n  HandlerState,\n} from \"@babel/helper-member-expression-to-functions\";\nimport optimiseCall from \"@babel/helper-optimise-call-expression\";\nimport annotateAsPure from \"@babel/helper-annotate-as-pure\";\nimport { isTransparentExprWrapper } from \"@babel/helper-skip-transparent-expression-wrappers\";\n\nimport * as ts from \"./typescript\";\n\ninterface PrivateNameMetadata {\n  id: t.Identifier;\n  static: boolean;\n  method: boolean;\n  getId?: t.Identifier;\n  setId?: t.Identifier;\n  methodId?: t.Identifier;\n  initAdded?: boolean;\n  getterDeclared?: boolean;\n  setterDeclared?: boolean;\n}\n\ntype PrivateNamesMap = Map<string, PrivateNameMetadata>;\n\nexport function buildPrivateNamesMap(props: PropPath[]) {\n  const privateNamesMap: PrivateNamesMap = new Map();\n  for (const prop of props) {\n    if (prop.isPrivate()) {\n      const { name } = prop.node.key.id;\n      const update: PrivateNameMetadata = privateNamesMap.has(name)\n        ? privateNamesMap.get(name)\n        : {\n            id: prop.scope.generateUidIdentifier(name),\n            static: prop.node.static,\n            method: !prop.isProperty(),\n          };\n      if (prop.isClassPrivateMethod()) {\n        if (prop.node.kind === \"get\") {\n          update.getId = prop.scope.generateUidIdentifier(`get_${name}`);\n        } else if (prop.node.kind === \"set\") {\n          update.setId = prop.scope.generateUidIdentifier(`set_${name}`);\n        } else if (prop.node.kind === \"method\") {\n          update.methodId = prop.scope.generateUidIdentifier(name);\n        }\n      }\n      privateNamesMap.set(name, update);\n    }\n  }\n  return privateNamesMap;\n}\n\nexport function buildPrivateNamesNodes(\n  privateNamesMap: PrivateNamesMap,\n  privateFieldsAsProperties: boolean,\n  privateFieldsAsSymbols: boolean,\n  state: File,\n) {\n  const initNodes: t.Statement[] = [];\n\n  for (const [name, value] of privateNamesMap) {\n    // - When the privateFieldsAsProperties assumption is enabled,\n    //   both static and instance fields are transpiled using a\n    //   secret non-enumerable property. Hence, we also need to generate that\n    //   key (using the classPrivateFieldLooseKey helper).\n    // - When the privateFieldsAsSymbols assumption is enabled,\n    //   both static and instance fields are transpiled using a\n    //   unique Symbol to define a non-enumerable property.\n    // - In spec mode, only instance fields need a \"private name\" initializer\n    //   because static fields are directly assigned to a variable in the\n    //   buildPrivateStaticFieldInitSpec function.\n    const { static: isStatic, method: isMethod, getId, setId } = value;\n    const isAccessor = getId || setId;\n    const id = t.cloneNode(value.id);\n\n    let init: t.Expression;\n\n    if (privateFieldsAsProperties) {\n      init = t.callExpression(state.addHelper(\"classPrivateFieldLooseKey\"), [\n        t.stringLiteral(name),\n      ]);\n    } else if (privateFieldsAsSymbols) {\n      init = t.callExpression(t.identifier(\"Symbol\"), [t.stringLiteral(name)]);\n    } else if (!isStatic) {\n      init = t.newExpression(\n        t.identifier(!isMethod || isAccessor ? \"WeakMap\" : \"WeakSet\"),\n        [],\n      );\n    }\n\n    if (init) {\n      annotateAsPure(init);\n      initNodes.push(template.statement.ast`var ${id} = ${init}`);\n    }\n  }\n\n  return initNodes;\n}\n\ninterface PrivateNameVisitorState {\n  privateNamesMap: PrivateNamesMap;\n  privateFieldsAsProperties: boolean;\n  redeclared?: string[];\n}\n\n// Traverses the class scope, handling private name references. If an inner\n// class redeclares the same private name, it will hand off traversal to the\n// restricted visitor (which doesn't traverse the inner class's inner scope).\nfunction privateNameVisitorFactory<S>(\n  visitor: Visitor<PrivateNameVisitorState & S>,\n) {\n  // Traverses the outer portion of a class, without touching the class's inner\n  // scope, for private names.\n  const nestedVisitor = traverse.visitors.merge([\n    {\n      ...visitor,\n    },\n    environmentVisitor,\n  ]);\n\n  const privateNameVisitor: Visitor<PrivateNameVisitorState & S> = {\n    ...visitor,\n\n    Class(path) {\n      const { privateNamesMap } = this;\n      const body = path.get(\"body.body\");\n\n      const visiblePrivateNames = new Map(privateNamesMap);\n      const redeclared = [];\n      for (const prop of body) {\n        if (!prop.isPrivate()) continue;\n        const { name } = prop.node.key.id;\n        visiblePrivateNames.delete(name);\n        redeclared.push(name);\n      }\n\n      // If the class doesn't redeclare any private fields, we can continue with\n      // our overall traversal.\n      if (!redeclared.length) {\n        return;\n      }\n\n      // This class redeclares some private field. We need to process the outer\n      // environment with access to all the outer privates, then we can process\n      // the inner environment with only the still-visible outer privates.\n      path.get(\"body\").traverse(nestedVisitor, {\n        ...this,\n        redeclared,\n      });\n      path.traverse(privateNameVisitor, {\n        ...this,\n        privateNamesMap: visiblePrivateNames,\n      });\n\n      // We'll eventually hit this class node again with the overall Class\n      // Features visitor, which'll process the redeclared privates.\n      path.skipKey(\"body\");\n    },\n  };\n\n  return privateNameVisitor;\n}\n\ninterface PrivateNameState {\n  privateNamesMap: PrivateNamesMap;\n  classRef: t.Identifier;\n  file: File;\n  noDocumentAll: boolean;\n  innerBinding?: t.Identifier;\n}\n\nconst privateNameVisitor = privateNameVisitorFactory<\n  HandlerState<PrivateNameState> & PrivateNameState\n>({\n  PrivateName(path, { noDocumentAll }) {\n    const { privateNamesMap, redeclared } = this;\n    const { node, parentPath } = path;\n\n    if (\n      !parentPath.isMemberExpression({ property: node }) &&\n      !parentPath.isOptionalMemberExpression({ property: node })\n    ) {\n      return;\n    }\n    const { name } = node.id;\n    if (!privateNamesMap.has(name)) return;\n    if (redeclared && redeclared.includes(name)) return;\n\n    this.handle(parentPath, noDocumentAll);\n  },\n});\n\n// rename all bindings that shadows innerBinding\nfunction unshadow(\n  name: string,\n  scope: Scope,\n  innerBinding: t.Identifier | undefined,\n) {\n  // in some cases, scope.getBinding(name) === undefined\n  // so we check hasBinding to avoid keeping looping\n  // see: https://github.com/babel/babel/pull/13656#discussion_r686030715\n  while (\n    scope?.hasBinding(name) &&\n    !scope.bindingIdentifierEquals(name, innerBinding)\n  ) {\n    scope.rename(name);\n    scope = scope.parent;\n  }\n}\n\nexport function buildCheckInRHS(\n  rhs: t.Expression,\n  file: File,\n  inRHSIsObject?: boolean,\n) {\n  if (inRHSIsObject || !file.availableHelper?.(\"checkInRHS\")) return rhs;\n  return t.callExpression(file.addHelper(\"checkInRHS\"), [rhs]);\n}\n\nconst privateInVisitor = privateNameVisitorFactory<{\n  classRef: t.Identifier;\n  file: File;\n  innerBinding?: t.Identifier;\n}>({\n  BinaryExpression(path, { file }) {\n    const { operator, left, right } = path.node;\n    if (operator !== \"in\") return;\n    if (!t.isPrivateName(left)) return;\n\n    const { privateFieldsAsProperties, privateNamesMap, redeclared } = this;\n\n    const { name } = left.id;\n\n    if (!privateNamesMap.has(name)) return;\n    if (redeclared && redeclared.includes(name)) return;\n\n    // if there are any local variable shadowing classRef, unshadow it\n    // see #12960\n    unshadow(this.classRef.name, path.scope, this.innerBinding);\n\n    if (privateFieldsAsProperties) {\n      const { id } = privateNamesMap.get(name);\n      path.replaceWith(template.expression.ast`\n        Object.prototype.hasOwnProperty.call(${buildCheckInRHS(\n          right,\n          file,\n        )}, ${t.cloneNode(id)})\n      `);\n      return;\n    }\n\n    const { id, static: isStatic } = privateNamesMap.get(name);\n\n    if (isStatic) {\n      path.replaceWith(\n        template.expression.ast`${buildCheckInRHS(\n          right,\n          file,\n        )} === ${t.cloneNode(this.classRef)}`,\n      );\n      return;\n    }\n\n    path.replaceWith(\n      template.expression.ast`${t.cloneNode(id)}.has(${buildCheckInRHS(\n        right,\n        file,\n      )})`,\n    );\n  },\n});\n\ninterface Receiver {\n  receiver(\n    this: HandlerState<PrivateNameState> & PrivateNameState,\n    member: NodePath<t.MemberExpression | t.OptionalMemberExpression>,\n  ): t.Expression;\n}\n\nconst privateNameHandlerSpec: Handler<PrivateNameState & Receiver> & Receiver =\n  {\n    memoise(member, count) {\n      const { scope } = member;\n      const { object } = member.node as { object: t.Expression };\n\n      const memo = scope.maybeGenerateMemoised(object);\n      if (!memo) {\n        return;\n      }\n\n      this.memoiser.set(object, memo, count);\n    },\n\n    receiver(member) {\n      const { object } = member.node as { object: t.Expression };\n\n      if (this.memoiser.has(object)) {\n        return t.cloneNode(this.memoiser.get(object));\n      }\n\n      return t.cloneNode(object);\n    },\n\n    get(member) {\n      const { classRef, privateNamesMap, file, innerBinding } = this;\n      const { name } = (member.node.property as t.PrivateName).id;\n      const {\n        id,\n        static: isStatic,\n        method: isMethod,\n        methodId,\n        getId,\n        setId,\n      } = privateNamesMap.get(name);\n      const isAccessor = getId || setId;\n\n      if (isStatic) {\n        const helperName =\n          isMethod && !isAccessor\n            ? \"classStaticPrivateMethodGet\"\n            : \"classStaticPrivateFieldSpecGet\";\n\n        // if there are any local variable shadowing classRef, unshadow it\n        // see #12960\n        unshadow(classRef.name, member.scope, innerBinding);\n\n        return t.callExpression(file.addHelper(helperName), [\n          this.receiver(member),\n          t.cloneNode(classRef),\n          t.cloneNode(id),\n        ]);\n      }\n\n      if (isMethod) {\n        if (isAccessor) {\n          if (!getId && setId) {\n            if (file.availableHelper(\"writeOnlyError\")) {\n              return t.sequenceExpression([\n                this.receiver(member),\n                t.callExpression(file.addHelper(\"writeOnlyError\"), [\n                  t.stringLiteral(`#${name}`),\n                ]),\n              ]);\n            }\n            console.warn(\n              `@babel/helpers is outdated, update it to silence this warning.`,\n            );\n          }\n          return t.callExpression(file.addHelper(\"classPrivateFieldGet\"), [\n            this.receiver(member),\n            t.cloneNode(id),\n          ]);\n        }\n        return t.callExpression(file.addHelper(\"classPrivateMethodGet\"), [\n          this.receiver(member),\n          t.cloneNode(id),\n          t.cloneNode(methodId),\n        ]);\n      }\n      return t.callExpression(file.addHelper(\"classPrivateFieldGet\"), [\n        this.receiver(member),\n        t.cloneNode(id),\n      ]);\n    },\n\n    boundGet(member) {\n      this.memoise(member, 1);\n\n      return t.callExpression(\n        t.memberExpression(this.get(member), t.identifier(\"bind\")),\n        [this.receiver(member)],\n      );\n    },\n\n    set(member, value) {\n      const { classRef, privateNamesMap, file } = this;\n      const { name } = (member.node.property as t.PrivateName).id;\n      const {\n        id,\n        static: isStatic,\n        method: isMethod,\n        setId,\n        getId,\n      } = privateNamesMap.get(name);\n      const isAccessor = getId || setId;\n\n      if (isStatic) {\n        const helperName =\n          isMethod && !isAccessor\n            ? \"classStaticPrivateMethodSet\"\n            : \"classStaticPrivateFieldSpecSet\";\n\n        return t.callExpression(file.addHelper(helperName), [\n          this.receiver(member),\n          t.cloneNode(classRef),\n          t.cloneNode(id),\n          value,\n        ]);\n      }\n      if (isMethod) {\n        if (setId) {\n          return t.callExpression(file.addHelper(\"classPrivateFieldSet\"), [\n            this.receiver(member),\n            t.cloneNode(id),\n            value,\n          ]);\n        }\n        return t.sequenceExpression([\n          this.receiver(member),\n          value,\n          t.callExpression(file.addHelper(\"readOnlyError\"), [\n            t.stringLiteral(`#${name}`),\n          ]),\n        ]);\n      }\n      return t.callExpression(file.addHelper(\"classPrivateFieldSet\"), [\n        this.receiver(member),\n        t.cloneNode(id),\n        value,\n      ]);\n    },\n\n    destructureSet(member) {\n      const { classRef, privateNamesMap, file } = this;\n      const { name } = (member.node.property as t.PrivateName).id;\n      const { id, static: isStatic } = privateNamesMap.get(name);\n      if (isStatic) {\n        try {\n          // classStaticPrivateFieldDestructureSet was introduced in 7.13.10\n          // eslint-disable-next-line no-var\n          var helper = file.addHelper(\"classStaticPrivateFieldDestructureSet\");\n        } catch {\n          throw new Error(\n            \"Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \\n\" +\n              \"please update @babel/helpers to the latest version.\",\n          );\n        }\n        return t.memberExpression(\n          t.callExpression(helper, [\n            this.receiver(member),\n            t.cloneNode(classRef),\n            t.cloneNode(id),\n          ]),\n          t.identifier(\"value\"),\n        );\n      }\n\n      return t.memberExpression(\n        t.callExpression(file.addHelper(\"classPrivateFieldDestructureSet\"), [\n          this.receiver(member),\n          t.cloneNode(id),\n        ]),\n        t.identifier(\"value\"),\n      );\n    },\n\n    call(member, args: (t.Expression | t.SpreadElement)[]) {\n      // The first access (the get) should do the memo assignment.\n      this.memoise(member, 1);\n\n      return optimiseCall(this.get(member), this.receiver(member), args, false);\n    },\n\n    optionalCall(member, args: (t.Expression | t.SpreadElement)[]) {\n      this.memoise(member, 1);\n\n      return optimiseCall(this.get(member), this.receiver(member), args, true);\n    },\n  };\n\nconst privateNameHandlerLoose: Handler<PrivateNameState> = {\n  get(member) {\n    const { privateNamesMap, file } = this;\n    const { object } = member.node;\n    const { name } = (member.node.property as t.PrivateName).id;\n\n    return template.expression`BASE(REF, PROP)[PROP]`({\n      BASE: file.addHelper(\"classPrivateFieldLooseBase\"),\n      REF: t.cloneNode(object),\n      PROP: t.cloneNode(privateNamesMap.get(name).id),\n    });\n  },\n\n  set() {\n    // noop\n    throw new Error(\"private name handler with loose = true don't need set()\");\n  },\n\n  boundGet(member) {\n    return t.callExpression(\n      t.memberExpression(this.get(member), t.identifier(\"bind\")),\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      [t.cloneNode(member.node.object as t.Expression)],\n    );\n  },\n\n  simpleSet(member) {\n    return this.get(member);\n  },\n\n  destructureSet(member) {\n    return this.get(member);\n  },\n\n  call(member, args) {\n    return t.callExpression(this.get(member), args);\n  },\n\n  optionalCall(member, args) {\n    return t.optionalCallExpression(this.get(member), args, true);\n  },\n};\n\nexport function transformPrivateNamesUsage(\n  ref: t.Identifier,\n  path: NodePath<t.Class>,\n  privateNamesMap: PrivateNamesMap,\n  {\n    privateFieldsAsProperties,\n    noDocumentAll,\n    innerBinding,\n  }: {\n    privateFieldsAsProperties: boolean;\n    noDocumentAll: boolean;\n    innerBinding: t.Identifier;\n  },\n  state: File,\n) {\n  if (!privateNamesMap.size) return;\n\n  const body = path.get(\"body\");\n  const handler = privateFieldsAsProperties\n    ? privateNameHandlerLoose\n    : privateNameHandlerSpec;\n\n  memberExpressionToFunctions<PrivateNameState>(body, privateNameVisitor, {\n    privateNamesMap,\n    classRef: ref,\n    file: state,\n    ...handler,\n    noDocumentAll,\n    innerBinding,\n  });\n  body.traverse(privateInVisitor, {\n    privateNamesMap,\n    classRef: ref,\n    file: state,\n    privateFieldsAsProperties,\n    innerBinding,\n  });\n}\n\nfunction buildPrivateFieldInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateProperty>,\n  privateNamesMap: PrivateNamesMap,\n) {\n  const { id } = privateNamesMap.get(prop.node.key.id.name);\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  return inheritPropComments(\n    template.statement.ast`\n      Object.defineProperty(${ref}, ${t.cloneNode(id)}, {\n        // configurable is false by default\n        // enumerable is false by default\n        writable: true,\n        value: ${value}\n      });\n    `,\n    prop,\n  );\n}\n\nfunction buildPrivateInstanceFieldInitSpec(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateProperty>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const { id } = privateNamesMap.get(prop.node.key.id.name);\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (!state.availableHelper(\"classPrivateFieldInitSpec\")) {\n      return inheritPropComments(\n        template.statement.ast`${t.cloneNode(id)}.set(${ref}, {\n          // configurable is always false for private elements\n          // enumerable is always false for private elements\n          writable: true,\n          value: ${value},\n        })`,\n        prop,\n      );\n    }\n  }\n\n  const helper = state.addHelper(\"classPrivateFieldInitSpec\");\n  return inheritPropComments(\n    template.statement.ast`${helper}(\n      ${t.thisExpression()},\n      ${t.cloneNode(id)},\n      {\n        writable: true,\n        value: ${value}\n      },\n    )`,\n    prop,\n  );\n}\n\nfunction buildPrivateStaticFieldInitSpec(\n  prop: NodePath<t.ClassPrivateProperty>,\n  privateNamesMap: PrivateNamesMap,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { id, getId, setId, initAdded } = privateName;\n  const isAccessor = getId || setId;\n\n  if (!prop.isProperty() && (initAdded || !isAccessor)) return;\n\n  if (isAccessor) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      initAdded: true,\n    });\n\n    return inheritPropComments(\n      template.statement.ast`\n        var ${t.cloneNode(id)} = {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n        }\n      `,\n      prop,\n    );\n  }\n\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n  return inheritPropComments(\n    template.statement.ast`\n      var ${t.cloneNode(id)} = {\n        // configurable is false by default\n        // enumerable is false by default\n        writable: true,\n        value: ${value}\n      };\n    `,\n    prop,\n  );\n}\n\nfunction buildPrivateMethodInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { methodId, id, getId, setId, initAdded } = privateName;\n  if (initAdded) return;\n\n  if (methodId) {\n    return inheritPropComments(\n      template.statement.ast`\n        Object.defineProperty(${ref}, ${id}, {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          value: ${methodId.name}\n        });\n      `,\n      prop,\n    );\n  }\n  const isAccessor = getId || setId;\n  if (isAccessor) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      initAdded: true,\n    });\n\n    return inheritPropComments(\n      template.statement.ast`\n        Object.defineProperty(${ref}, ${id}, {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n        });\n      `,\n      prop,\n    );\n  }\n}\n\nfunction buildPrivateInstanceMethodInitSpec(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { getId, setId, initAdded } = privateName;\n\n  if (initAdded) return;\n\n  const isAccessor = getId || setId;\n  if (isAccessor) {\n    return buildPrivateAccessorInitialization(\n      ref,\n      prop,\n      privateNamesMap,\n      state,\n    );\n  }\n\n  return buildPrivateInstanceMethodInitialization(\n    ref,\n    prop,\n    privateNamesMap,\n    state,\n  );\n}\n\nfunction buildPrivateAccessorInitialization(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { id, getId, setId } = privateName;\n\n  privateNamesMap.set(prop.node.key.id.name, {\n    ...privateName,\n    initAdded: true,\n  });\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (!state.availableHelper(\"classPrivateFieldInitSpec\")) {\n      return inheritPropComments(\n        template.statement.ast`\n          ${id}.set(${ref}, {\n            get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n            set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n          });\n        `,\n        prop,\n      );\n    }\n  }\n\n  const helper = state.addHelper(\"classPrivateFieldInitSpec\");\n  return inheritPropComments(\n    template.statement.ast`${helper}(\n      ${t.thisExpression()},\n      ${t.cloneNode(id)},\n      {\n        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n      },\n    )`,\n    prop,\n  );\n}\n\nfunction buildPrivateInstanceMethodInitialization(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { id } = privateName;\n\n  if (!process.env.BABEL_8_BREAKING) {\n    if (!state.availableHelper(\"classPrivateMethodInitSpec\")) {\n      return inheritPropComments(\n        template.statement.ast`${id}.add(${ref})`,\n        prop,\n      );\n    }\n  }\n\n  const helper = state.addHelper(\"classPrivateMethodInitSpec\");\n  return inheritPropComments(\n    template.statement.ast`${helper}(\n      ${t.thisExpression()},\n      ${t.cloneNode(id)}\n    )`,\n    prop,\n  );\n}\n\nfunction buildPublicFieldInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassProperty>,\n) {\n  const { key, computed } = prop.node;\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  return inheritPropComments(\n    t.expressionStatement(\n      t.assignmentExpression(\n        \"=\",\n        t.memberExpression(ref, key, computed || t.isLiteral(key)),\n        value,\n      ),\n    ),\n    prop,\n  );\n}\n\nfunction buildPublicFieldInitSpec(\n  ref: t.Expression,\n  prop: NodePath<t.ClassProperty>,\n  state: File,\n) {\n  const { key, computed } = prop.node;\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n\n  return inheritPropComments(\n    t.expressionStatement(\n      t.callExpression(state.addHelper(\"defineProperty\"), [\n        ref,\n        computed || t.isLiteral(key)\n          ? key\n          : t.stringLiteral((key as t.Identifier).name),\n        value,\n      ]),\n    ),\n    prop,\n  );\n}\n\nfunction buildPrivateStaticMethodInitLoose(\n  ref: t.Expression,\n  prop: NodePath<t.ClassPrivateMethod>,\n  state: File,\n  privateNamesMap: PrivateNamesMap,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const { id, methodId, getId, setId, initAdded } = privateName;\n\n  if (initAdded) return;\n\n  const isAccessor = getId || setId;\n  if (isAccessor) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      initAdded: true,\n    });\n\n    return inheritPropComments(\n      template.statement.ast`\n        Object.defineProperty(${ref}, ${id}, {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n          set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n        })\n      `,\n      prop,\n    );\n  }\n\n  return inheritPropComments(\n    template.statement.ast`\n      Object.defineProperty(${ref}, ${id}, {\n        // configurable is false by default\n        // enumerable is false by default\n        // writable is false by default\n        value: ${methodId.name}\n      });\n    `,\n    prop,\n  );\n}\n\nfunction buildPrivateMethodDeclaration(\n  prop: NodePath<t.ClassPrivateMethod>,\n  privateNamesMap: PrivateNamesMap,\n  privateFieldsAsProperties = false,\n) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    id,\n    methodId,\n    getId,\n    setId,\n    getterDeclared,\n    setterDeclared,\n    static: isStatic,\n  } = privateName;\n  const { params, body, generator, async } = prop.node;\n  const isGetter = getId && !getterDeclared && params.length === 0;\n  const isSetter = setId && !setterDeclared && params.length > 0;\n\n  let declId = methodId;\n\n  if (isGetter) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      getterDeclared: true,\n    });\n    declId = getId;\n  } else if (isSetter) {\n    privateNamesMap.set(prop.node.key.id.name, {\n      ...privateName,\n      setterDeclared: true,\n    });\n    declId = setId;\n  } else if (isStatic && !privateFieldsAsProperties) {\n    declId = id;\n  }\n\n  return inheritPropComments(\n    t.functionDeclaration(\n      t.cloneNode(declId),\n      // @ts-expect-error params for ClassMethod has TSParameterProperty\n      params,\n      body,\n      generator,\n      async,\n    ),\n    prop,\n  );\n}\n\ntype ReplaceThisState = {\n  classRef: t.Identifier;\n  needsClassRef: boolean;\n  innerBinding: t.Identifier | null;\n};\n\nconst thisContextVisitor = traverse.visitors.merge<ReplaceThisState>([\n  {\n    ThisExpression(path, state) {\n      // Replace `delete this` with `true`\n      const parent = path.findParent(\n        path => !isTransparentExprWrapper(path.node),\n      );\n      if (t.isUnaryExpression(parent.node, { operator: \"delete\" })) {\n        path.parentPath.replaceWith(t.booleanLiteral(true));\n        return;\n      }\n\n      state.needsClassRef = true;\n      path.replaceWith(t.cloneNode(state.classRef));\n    },\n    MetaProperty(path) {\n      const meta = path.get(\"meta\");\n      const property = path.get(\"property\");\n      const { scope } = path;\n      // if there are `new.target` in static field\n      // we should replace it with `undefined`\n      if (\n        meta.isIdentifier({ name: \"new\" }) &&\n        property.isIdentifier({ name: \"target\" })\n      ) {\n        path.replaceWith(scope.buildUndefinedNode());\n      }\n    },\n  },\n  environmentVisitor,\n]);\n\nconst innerReferencesVisitor: Visitor<ReplaceThisState> = {\n  ReferencedIdentifier(path, state) {\n    if (\n      path.scope.bindingIdentifierEquals(path.node.name, state.innerBinding)\n    ) {\n      state.needsClassRef = true;\n      path.node.name = state.classRef.name;\n    }\n  },\n};\n\nfunction replaceThisContext(\n  path: PropPath,\n  ref: t.Identifier,\n  getSuperRef: () => t.Identifier,\n  file: File,\n  isStaticBlock: boolean,\n  constantSuper: boolean,\n  innerBindingRef: t.Identifier | null,\n) {\n  const state: ReplaceThisState = {\n    classRef: ref,\n    needsClassRef: false,\n    innerBinding: innerBindingRef,\n  };\n\n  const replacer = new ReplaceSupers({\n    methodPath: path,\n    constantSuper,\n    file,\n    refToPreserve: ref,\n    getSuperRef,\n    getObjectRef() {\n      state.needsClassRef = true;\n      // @ts-expect-error: TS doesn't infer that path.node is not a StaticBlock\n      return t.isStaticBlock?.(path.node) || path.node.static\n        ? ref\n        : t.memberExpression(ref, t.identifier(\"prototype\"));\n    },\n  });\n  replacer.replace();\n  if (isStaticBlock || path.isProperty()) {\n    path.traverse(thisContextVisitor, state);\n  }\n\n  // todo: use innerBinding.referencePaths to avoid full traversal\n  if (\n    innerBindingRef != null &&\n    state.classRef?.name &&\n    state.classRef.name !== innerBindingRef?.name\n  ) {\n    path.traverse(innerReferencesVisitor, state);\n  }\n\n  return state.needsClassRef;\n}\n\nexport type PropNode =\n  | t.ClassProperty\n  | t.ClassPrivateMethod\n  | t.ClassPrivateProperty\n  | t.StaticBlock;\nexport type PropPath = NodePath<PropNode>;\n\nfunction isNameOrLength({ key, computed }: t.ClassProperty) {\n  if (key.type === \"Identifier\") {\n    return !computed && (key.name === \"name\" || key.name === \"length\");\n  }\n  if (key.type === \"StringLiteral\") {\n    return key.value === \"name\" || key.value === \"length\";\n  }\n  return false;\n}\n\n/**\n * Inherit comments from class members. This is a reduced version of\n * t.inheritsComments: the trailing comments are not inherited because\n * for most class members except the last one, their trailing comments are\n * the next sibling's leading comments.\n *\n * @template T transformed class member type\n * @param {T} node transformed class member\n * @param {PropPath} prop class member\n * @returns transformed class member type with comments inherited\n */\nfunction inheritPropComments<T extends t.Node>(node: T, prop: PropPath) {\n  t.inheritLeadingComments(node, prop.node);\n  t.inheritInnerComments(node, prop.node);\n  return node;\n}\n\nexport function buildFieldsInitNodes(\n  ref: t.Identifier,\n  superRef: t.Expression | undefined,\n  props: PropPath[],\n  privateNamesMap: PrivateNamesMap,\n  state: File,\n  setPublicClassFields: boolean,\n  privateFieldsAsProperties: boolean,\n  constantSuper: boolean,\n  innerBindingRef: t.Identifier,\n) {\n  let needsClassRef = false;\n  let injectSuperRef: t.Identifier;\n  const staticNodes: t.Statement[] = [];\n  const instanceNodes: t.Statement[] = [];\n  // These nodes are pure and can be moved to the closest statement position\n  const pureStaticNodes: t.FunctionDeclaration[] = [];\n\n  const getSuperRef = t.isIdentifier(superRef)\n    ? () => superRef\n    : () => {\n        injectSuperRef ??=\n          props[0].scope.generateUidIdentifierBasedOnNode(superRef);\n        return injectSuperRef;\n      };\n\n  for (const prop of props) {\n    prop.isClassProperty() && ts.assertFieldTransformed(prop);\n\n    // @ts-expect-error: TS doesn't infer that prop.node is not a StaticBlock\n    const isStatic = !t.isStaticBlock?.(prop.node) && prop.node.static;\n    const isInstance = !isStatic;\n    const isPrivate = prop.isPrivate();\n    const isPublic = !isPrivate;\n    const isField = prop.isProperty();\n    const isMethod = !isField;\n    const isStaticBlock = prop.isStaticBlock?.();\n\n    if (isStatic || (isMethod && isPrivate) || isStaticBlock) {\n      const replaced = replaceThisContext(\n        prop,\n        ref,\n        getSuperRef,\n        state,\n        isStaticBlock,\n        constantSuper,\n        innerBindingRef,\n      );\n      needsClassRef = needsClassRef || replaced;\n    }\n\n    // TODO(ts): there are so many `ts-expect-error` inside cases since\n    // ts can not infer type from pre-computed values (or a case test)\n    // even change `isStaticBlock` to `t.isStaticBlock(prop)` will not make prop\n    // a `NodePath<t.StaticBlock>`\n    // this maybe a bug for ts\n    switch (true) {\n      case isStaticBlock: {\n        const blockBody = (prop.node as t.StaticBlock).body;\n        // We special-case the single expression case to avoid the iife, since\n        // it's common.\n        if (blockBody.length === 1 && t.isExpressionStatement(blockBody[0])) {\n          staticNodes.push(inheritPropComments(blockBody[0], prop));\n        } else {\n          staticNodes.push(\n            t.inheritsComments(\n              template.statement.ast`(() => { ${blockBody} })()`,\n              prop.node,\n            ),\n          );\n        }\n        break;\n      }\n      case isStatic && isPrivate && isField && privateFieldsAsProperties:\n        needsClassRef = true;\n        staticNodes.push(\n          // @ts-expect-error checked in switch\n          buildPrivateFieldInitLoose(t.cloneNode(ref), prop, privateNamesMap),\n        );\n        break;\n      case isStatic && isPrivate && isField && !privateFieldsAsProperties:\n        needsClassRef = true;\n        staticNodes.push(\n          // @ts-expect-error checked in switch\n          buildPrivateStaticFieldInitSpec(prop, privateNamesMap),\n        );\n        break;\n      case isStatic && isPublic && isField && setPublicClassFields:\n        // Functions always have non-writable .name and .length properties,\n        // so we must always use [[Define]] for them.\n        // It might still be possible to a computed static fields whose resulting\n        // key is \"name\" or \"length\", but the assumption is telling us that it's\n        // not going to happen.\n        // @ts-expect-error checked in switch\n        if (!isNameOrLength(prop.node)) {\n          needsClassRef = true;\n          // @ts-expect-error checked in switch\n          staticNodes.push(buildPublicFieldInitLoose(t.cloneNode(ref), prop));\n          break;\n        }\n      // falls through\n      case isStatic && isPublic && isField && !setPublicClassFields:\n        needsClassRef = true;\n        staticNodes.push(\n          // @ts-expect-error checked in switch\n          buildPublicFieldInitSpec(t.cloneNode(ref), prop, state),\n        );\n        break;\n      case isInstance && isPrivate && isField && privateFieldsAsProperties:\n        instanceNodes.push(\n          // @ts-expect-error checked in switch\n          buildPrivateFieldInitLoose(t.thisExpression(), prop, privateNamesMap),\n        );\n        break;\n      case isInstance && isPrivate && isField && !privateFieldsAsProperties:\n        instanceNodes.push(\n          buildPrivateInstanceFieldInitSpec(\n            t.thisExpression(),\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            state,\n          ),\n        );\n        break;\n      case isInstance && isPrivate && isMethod && privateFieldsAsProperties:\n        instanceNodes.unshift(\n          buildPrivateMethodInitLoose(\n            t.thisExpression(),\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n          ),\n        );\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            privateFieldsAsProperties,\n          ),\n        );\n        break;\n      case isInstance && isPrivate && isMethod && !privateFieldsAsProperties:\n        instanceNodes.unshift(\n          buildPrivateInstanceMethodInitSpec(\n            t.thisExpression(),\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            state,\n          ),\n        );\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            privateFieldsAsProperties,\n          ),\n        );\n        break;\n      case isStatic && isPrivate && isMethod && !privateFieldsAsProperties:\n        needsClassRef = true;\n        staticNodes.unshift(\n          // @ts-expect-error checked in switch\n          buildPrivateStaticFieldInitSpec(prop, privateNamesMap),\n        );\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            privateFieldsAsProperties,\n          ),\n        );\n        break;\n      case isStatic && isPrivate && isMethod && privateFieldsAsProperties:\n        needsClassRef = true;\n        staticNodes.unshift(\n          buildPrivateStaticMethodInitLoose(\n            t.cloneNode(ref),\n            // @ts-expect-error checked in switch\n            prop,\n            state,\n            privateNamesMap,\n          ),\n        );\n        pureStaticNodes.push(\n          buildPrivateMethodDeclaration(\n            // @ts-expect-error checked in switch\n            prop,\n            privateNamesMap,\n            privateFieldsAsProperties,\n          ),\n        );\n        break;\n      case isInstance && isPublic && isField && setPublicClassFields:\n        // @ts-expect-error checked in switch\n        instanceNodes.push(buildPublicFieldInitLoose(t.thisExpression(), prop));\n        break;\n      case isInstance && isPublic && isField && !setPublicClassFields:\n        instanceNodes.push(\n          // @ts-expect-error checked in switch\n          buildPublicFieldInitSpec(t.thisExpression(), prop, state),\n        );\n        break;\n      default:\n        throw new Error(\"Unreachable.\");\n    }\n  }\n\n  return {\n    staticNodes: staticNodes.filter(Boolean),\n    instanceNodes: instanceNodes.filter(Boolean),\n    pureStaticNodes: pureStaticNodes.filter(Boolean),\n    wrapClass(path: NodePath<t.Class>) {\n      for (const prop of props) {\n        // Delete leading comments so that they don't get attached as\n        // trailing comments of the previous sibling.\n        // When transforming props, we explicitly attach their leading\n        // comments to the transformed node with `inheritPropComments`\n        // above.\n        prop.node.leadingComments = null;\n        prop.remove();\n      }\n\n      if (injectSuperRef) {\n        path.scope.push({ id: t.cloneNode(injectSuperRef) });\n        path.set(\n          \"superClass\",\n          t.assignmentExpression(\"=\", injectSuperRef, path.node.superClass),\n        );\n      }\n\n      if (!needsClassRef) return path;\n\n      if (path.isClassExpression()) {\n        path.scope.push({ id: ref });\n        path.replaceWith(\n          t.assignmentExpression(\"=\", t.cloneNode(ref), path.node),\n        );\n      } else if (!path.node.id) {\n        // Anonymous class declaration\n        path.node.id = ref;\n      }\n\n      return path;\n    },\n  };\n}\n"],"mappings":"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"}