<style type="text/css">
.navbar-light .navbar-nav .nav-link {
        color: white;
        padding-right: 0.5rem;
        padding-left: 3.5rem;
        font-weight: bold;
    }
    .navbar-nav {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: column;
    flex-direction: column;
    padding-left: 0;
    margin-bottom: -5px;
}
    button {
        background-color: blue;
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        border: 2px solid white;
    }
    nav#myHeader {
    background-color: black;
}
    .button {
        background-color: #fff;
        color: #222020;
        padding: 6px 20px;
        border: none;
        cursor: pointer;
        border: 0px solid white;
    }
    .centered {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }
    button.button{
    background-color: white;
    color: black;
    padding: 7px 6px;
    border: none;
    cursor: pointer;
    margin-left: 124px;
}

.background-container {
    height: 500px;
    overflow: auto;
    position: relative;
    background-attachment: fixed;
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    background-color: #2f2fd3;
    background-image: url('./assets/simple.png');
}

.background-container::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5); /* Adjust the opacity as needed */
    z-index: 1; /* Ensure the overlay is above the background image */
}

.background-container h6 {
    position: relative; /* Ensure the text is positioned relative to the container */
    color: #FFFFFF;
    font-size: 52px;
    font-weight: bold;
    margin-top: 136px;
    z-index: 2; /* Ensure the text is above the overlay */
}
.background-container img {
    position: relative; /* Ensure the text is positioned relative to the container */
    color: #FFFFFF;
    font-size: 52px;
    font-weight: bold;
    margin-top: 136px;
    z-index: 2; /* Ensure the text is above the overlay */
}

.icon-box {
    display: flex;
    align-items: center;
    padding: 20px;
/*    border: 1px solid #ccc;*/
/*    border-radius: 5px;*/
}

.icon {
    margin-right: 20px;
    width: 88px;
    height: 50px;
/*    background-color: #F3F3F3;*/
/*    border-radius: 50px;*/
}



.hourglass-icon {
    width: 41px;
    height: 28px;
    margin-top: 10px;
}
.js-icon{
  width: 41px;
    height: 28px;
        margin-top: 10px;
}
.html-icon{
  width: 41px;
    height: 28px;
        margin-top: 10px;
}
.node-js-icon{
  width: 41px;
    height: 28px;
        margin-top: 10px;
}
.node-js-icon{
  width: 41px;
    height: 28px;
        margin-top: 10px;
}

.content {
    flex: 1;
}

.title {
    font-size: 18px;
    font-weight: bold;
}

.description {
    font-size: 14px;
    line-height: 1.5;
        color: orange;

}
.orange-icon {
    color: orange;
}
.viewBox {
    margin-left: 46px;
    margin-top: 29px;
}
.card {
    width: 420px;
    margin-bottom: -142px;
    margin: 0px auto;
    padding: 18px;
  background-color: #fff;
  border-radius: 12px; /* Increased border radius */
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.1); /* Adjusted box shadow */
  font-size: 16px; /* Increased font size */
}

.card h6 {
  margin-top: 0;
  font-size: 25px;
  font-weight: bold;
}

.form-group {
  margin-bottom: 20px;
}

.form-control {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
}

.btn-primary {
  background-color: orange;
  color: #fff;
  border: none;
  padding: 10px 20px;
  border-radius: 26px;
  cursor: pointer;
}

.btn-primary:hover {
  background-color: #ff9900;
}

  .container {
display: flex; /* Use flexbox */
justify-content: space-between; /* Space the items evenly */
}
    .left-box {
        padding: 20px;
        width: 120%;
        margin-top: 49px;
    }

    .right-box {
        padding: 20px;
/*        margin-top: 20px;*/
        margin-left: 193px
    }
</style>
<nav class="navbar navbar-expand-lg navbar-light bg-black" id="myHeader">
  <a href="/learnings">
    <svg width="50" height="50" viewBox="0 0 183 167" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path fill-rule="evenodd" clip-rule="evenodd" d="M99.4946 0H27.4946H7.49463V20V53.2541C11.6309 44.3145 18.7127 37.0164 27.4946 32.6049V20H99.4946V20.0019C134.335 20.2706 162.495 48.5967 162.495 83.5C162.495 111.767 144.025 135.721 118.495 143.95V164.711C155.205 155.928 182.495 122.901 182.495 83.5C182.495 37.551 145.381 0.27047 99.4946 0.00146484V0ZM24.5585 138.362C17.6575 129.535 18.7509 117.002 26.771 109.485L14.4264 93.6955C-2.28188 108.047 -4.90408 133.149 8.80262 150.68C22.5093 168.212 47.5022 171.722 65.4615 158.97L53.1164 143.181C43.8862 149.151 31.4596 147.188 24.5585 138.362ZM69.4366 153.948L20.9536 91.9376L36.7081 79.6199L66.4456 117.655C68.5469 113.8 71.4535 110.301 75.1327 107.425C82.2837 101.834 91.0107 99.6424 99.3667 100.613L96.9367 120.465C93.6607 120.117 90.2517 120.991 87.4517 123.181C81.7327 127.651 80.7217 135.911 85.1927 141.63C88.2177 145.499 92.9787 147.213 97.5127 146.532L97.4997 166.623C87.0077 167.233 76.3997 162.854 69.4366 153.948ZM73.1725 51.1098C84.4465 65.5298 81.8965 86.3591 67.4765 97.6334L55.1578 81.8775C60.8761 77.4066 61.8874 69.1468 57.4166 63.4285C52.9457 57.7102 44.6859 56.699 38.9676 61.1698C33.2493 65.6406 32.238 73.9005 36.7089 79.6188L20.953 91.9375C9.67871 77.5175 12.2288 56.6881 26.6488 45.4139C41.0689 34.1396 61.8982 36.6897 73.1725 51.1098Z" fill="white"/>
    </svg>
  </a>

  <div class="container">
    <ul class="navbar-nav">
      <li class="nav-item active" style="color: blcak;">
          <a class="nav-link" href="/learnings" style="color: #ffffff;">Home</a>
      </li>
      <li class="nav-item" style="color: white;">
        <a class="nav-link" href="#Courses" style="color: #ffffff;">Courses</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#Instructors" style="color: #ffffff;">Instructors</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="#Request Callback" style="color: #ffffff;">Request Callback</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/jobs" style="color: #ffffff;">Jobs</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/procast" style="color: #ffffff;">Blogs</a>
      </li>
    </ul>
  </div>
</nav>
<% @categories.each do |category| %>
  <div class="background-container" style="background-image: url('<%= url_for(category.image) if category.image.attached? %>');">
    <h6 class="text-center" style="color: #ffffffdb; font-size: 52px; font-weight: bold; margin-top: 136px;">
      <%= category.title %>
    </h6>
    <br>
  </div>
<% end %>

<div class="col-md-10"><br>
  <h2 class="border-bottom pb-2">&nbsp;&nbsp;Python Training</h2>
  <h2 class="ser">Introduction to Python</h2>
  <pr><li>What is Python?</li>
  <li>WHY PYTHON?</li>
  <li>History</li>
  <li>Features – Dynamic, Interpreted, Object oriented, Embeddable, Extensible, Large standard libraries, Free and Open source</li>
  <li>Why Python is General Language?</li>
  <li>Limitations of Python</li>
  <li>What is PSF?</li>
  <li>Python implementations</li>
  <li>Python applications</li>
  <li>Python versions</li>
  <li>PYTHON IN REALTIME INDUSTRY</li>
  <li>Difference between Python 2.x and 3.x</li>
  <li>Difference between Python 3.7 and 3.8</li>
  <li>Software Development Architectures</li></pr><br>

  <h2 class="ser">Python Software’s</h2>
  <pr><li>Python Distributions</li>
  <li>Download &Python Installation Process in Windows, Unix, Linux and Mac</li>
  <li>Online Python IDLE</li>
  <li>Python Real-time IDEs like Spyder, Jupyter Note Book, PyCharm, Rodeo, Visual Studio Code, ATOM, PyDevetc</li></pr><br>

  <h2 class="ser">Python Language Fundamentals</h2>
  <pr><li>Python Implementation Alternatives/Flavors</li>
  <li>Keywords</li>
  <li>Identifiers</li>
  <li>Constants / Literals</li>
  <li>Data types</li>
  <li>Python VS JAVA</li>
  <li>Python Syntax</li></pr><br>

  <h2 class="ser">Different Modes of Python</h2>
  <pr><li>Interactive Mode</li>
  <li>Scripting Mode</li>
  <li>Programming Elements</li>
  <li>Structure of Python program</li>
  <li>First Python Application</li>
  <li>Comments in Python</li>
  <li>Python file extensions</li>
  <li>Setting Path in Windows</li>
  <li>Edit and Run python program without IDE</li>
  <li>Edit and Run python program using IDEs</li>
  <li>INSIDE PYTHON</li>
  <li>Programmers View of Interpreter</li>
  <li>Inside INTERPRETER</li>
  <li>What is Byte Code in PYTHON?</li>
  <li>Python Debugger</li></pr><br>

  <h2 class="ser">Python Variables</h2>
  <pr><li>bytes Data Type</li>
  <li>byte array</li>
  <li>String Formatting in Python</li>
  <li>Math, Random, Secrets Modules</li>
  <li>Introduction</li>
  <li>Initialization of variables</li>
  <li>Local variables</li>
  <li>Global variables</li>
  <li>‘global’ keyword</li>
  <h2 class="ser">Input and Output operations</h2>
  <pr><li>Data conversion functions – int(), float(), complex(), str(), chr(), ord()</li>
  <li>Operators</li>
  <li>Arithmetic Operators</li>
  <li>Comparison Operators</li>
  <li>Python Assignment Operators</li>
  <li>Logical Operators</li>
  <li>Bitwise Operators</li>
  <li>Shift operators</li>
  <li>Membership Operators</li>
  <li>Identity Operators</li>
  <li>Ternary Operator</li>
  <li>Operator precedence</li>
  <li>Difference between “is” vs “==”</li>
  <li>Input & Output Operators</li>
  <li>Print</li>
  <li>Input</li>
  <li>Command-line arguments</li></pr><br>
  <h2 class="ser">Control Statements</h2>
  <pr><li>Conditional control statements</li>
  <li>If</li>
  <li>If-else</li>
  <li>If-elif-else</li>
  <li>Nested-if</li>
  <li>Loop control statements</li>
  <li>for</li>
  <li>while</li>
  <li>Nested loops</li>
  <li>Branching statements</li>
  <li>Break</li>
  <li>Continue</li>
  <li>Pass</li>
  <li>Return</li>
  <li>Case studies</li>
  <h2 class="ser">Data Structures or Collections</h2>
  <pr><li>Introduction</li>
  <li>Importance of Data structures</li>
  <li>Applications of Data structures</li>
  <li>Types of Collections</li>
  <li>Sequence</li>
  <li>Strings, List, Tuple, range</li>
  <li>Non sequence</li>
  <li>Set, Frozen set, Dictionary</li>
  <li>Strings</li>
  <li>What is string</li>
  <li>Representation of Strings</li>
  <li>Processing elements using indexing</li>
  <li>Processing elements using Iterators</li>
  <li>Manipulation of String using Indexing and Slicing</li>
  <li>String operators</li>
  <li>Methods of String object</li>
  <li>String Formatting</li>
  <li>String functions</li>
  <li>String Immutability</li>
  <li>Case studies</li></pr><br>
  <h2 class="ser">List Collection</h2>
  <pr><li>What is List</li>
  <li>Need of List collection</li>
  <li>Different ways of creating List</li>
  <li>List comprehension</li>
  <li>List indices</li>
  <li>Processing elements of List through Indexing and Slicing</li>
  <li>List object methods</li>
  <li>List is Mutable</li>
  <li>Mutable and Immutable elements of List</li>
  <li>Nested Lists</li>
  <li>List_of_lists</li>
  <li>Hardcopy, shallowCopy and DeepCopy</li>
  <li>zip() in Python</li>
  <li>How to unzip?</li>
  <li>Python Arrays:</li>
  <li>Case studies</li></pr><br>
  <h2 class="ser">Tuple Collection</h2>
  <pr><li>What is tuple?</li>
  <li>Different ways of creating Tuple</li>
  <li>Method of Tuple object</li>
  <li>Tuple is Immutable</li>
  <li>Mutable and Immutable elements of Tuple</li>
  <li>Process tuple through Indexing and Slicing</li>
  <li>List v/s Tuple</li>
  <li>Case studies</li></pr><br>
  <h2 class="ser">Set Collection</h2>
  <pr><li>What is set?</li>
  <li>Different ways of creating set</li>
  <li>Difference between list and set</li>
  <li>Iteration Over Sets</li>
  <li>Accessing elements of set</li>
  <li>Python Set Methods</li>
  <li>Python Set Operations</li>
  <li>Union of sets</li>
  <li>functions and methods of set</li>
  <li>Python Frozen set</li>
  <li>Difference between set and frozenset ?</li>
  <li>Case study</li>
  <li>Dictionary Collection</li>
  <li>What is dictionary?</li>
  <li>Difference between list, set and dictionary</li>
  <li>How to create a dictionary?</li>
  <li>PYTHON HASHING?</li>
  <li>Accessing values of dictionary</li>
  <li>Python Dictionary Methods</li>
  <li>Copying dictionary</li>
  <li>Updating Dictionary</li>
  <li>Reading keys from Dictionary</li>
  <li>Reading values from Dictionary</li>
  <li>Reading items from Dictionary</li>
  <li>Delete Keys from the dictionary</li>
  <li>Sorting the Dictionary</li>
  <li>Python Dictionary Functions and methods</li>
  <li>Dictionary comprehension</li></pr><br>
</div>
<br>
<div class="footer">
<%= render "footer" %>
</div>

<script>
  window.onscroll = function() {myFunction()};

  var header = document.getElementById("myHeader");
  var sticky = header.offsetTop;

  function myFunction() {
    if (window.pageYOffset > sticky) {
      header.classList.add("sticky");
    } else {
      header.classList.remove("sticky");
    }
  }
</script>

<script>
  function downloadPDF() {
    var pdfContent = document.getElementById('pdfContent').innerHTML;
    var messageElement = document.getElementById('message');

    if (typeof window.navigator.msSaveBlob !== 'undefined') {
      window.navigator.msSaveBlob(new Blob([pdfContent], { type: 'application/pdf' }), 'document.pdf');
      messageElement.innerHTML = "PDF downloaded successfully!";
    } else {
      html2pdf()
        .from(pdfContent)
        .save()
        .then(function() {
          messageElement.innerHTML = "PDF downloaded successfully!";
        })
        .catch(function(error) {
          messageElement.innerHTML = "PDF download failed. " + error;
        });
    }
  }
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.9.3/html2pdf.bundle.min.js"></script>